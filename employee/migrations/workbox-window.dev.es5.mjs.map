#FFEB3B","cx":"41","cy":"13","r":"3"},"child":[]},{"tag":"polygon","attr":{"fill":"#2E7D32","points":"16.5,18 0,42 33,42"},"child":[]},{"tag":"polygon","attr":{"fill":"#4CAF50","points":"33.6,24 19.2,42 48,42"},"child":[]}]})(props);
};
export function FcLeave (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"path","attr":{"fill":"#FFCDD2","d":"M5,38V14h38v24c0,2.2-1.8,4-4,4H9C6.8,42,5,40.2,5,38z"},"child":[]},{"tag":"path","attr":{"fill":"#F44336","d":"M43,10v6H5v-6c0-2.2,1.8-4,4-4h30C41.2,6,43,7.8,43,10z"},"child":[]},{"tag":"g","attr":{"fill":"#B71C1C"},"child":[{"tag":"circle","attr":{"cx":"33","cy":"10","r":"3"},"child":[]},{"tag":"circle","attr":{"cx":"15","cy":"10","r":"3"},"child":[]}]},{"tag":"g","attr":{"fill":"#BDBDBD"},"child":[{"tag":"path","attr":{"d":"M33,3c-1.1,0-2,0.9-2,2v5c0,1.1,0.9,2,2,2s2-0.9,2-2V5C35,3.9,34.1,3,33,3z"},"child":[]},{"tag":"path","attr":{"d":"M15,3c-1.1,0-2,0.9-2,2v5c0,1.1,0.9,2,2,2s2-0.9,2-2V5C17,3.9,16.1,3,15,3z"},"child":[]}]},{"tag":"path","attr":{"fill":"#F44336","d":"M22.2,35.3c0-0.2,0-0.5,0.1-0.7c0.1-0.2,0.2-0.4,0.4-0.5s0.3-0.3,0.5-0.3c0.2-0.1,0.5-0.1,0.7-0.1 s0.5,0,0.7,0.1c0.2,0.1,0.4,0.2,0.6,0.3s0.3,0.3,0.4,0.5c0.1,0.2,0.1,0.4,0.1,0.7c0,0.2,0,0.5-0.1,0.7c-0.1,0.2-0.2,0.4-0.4,0.5 c-0.2,0.1-0.3,0.3-0.6,0.3S24.3,37,24,37s-0.5,0-0.7-0.1c-0.2-0.1-0.4-0.2-0.5-0.3c-0.2-0.1-0.3-0.3-0.4-0.5 C22.3,35.8,22.2,35.6,22.2,35.3z M25.3,31h-2.6l-0.4-11h3.3L25.3,31z"},"child":[]}]})(props);
};
export function FcLeftDown (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"polygon","attr":{"fill":"#3F51B5","points":"7,41 7,23 25,41"},"child":[]},{"tag":"rect","attr":{"x":"22.6","y":"5","transform":"matrix(.707 .707 -.707 .707 22.912 -12.567)","fill":"#3F51B5","width":"8","height":"32.7"},"child":[]}]})(props);
};
export function FcLeftDown2 (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"polygon","attr":{"fill":"#3F51B5","points":"19,44 30.7,30 7.3,30"},"child":[]},{"tag":"path","attr":{"fill":"#3F51B5","d":"M27,6h13v8H27c-2.2,0-4,1.8-4,4v17h-8V18C15,11.4,20.4,6,27,6z"},"child":[]}]})(props);
};
export function FcLeftUp (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"polygon","attr":{"fill":"#3F51B5","points":"7,7 25,7 7,25"},"child":[]},{"tag":"rect","attr":{"x":"22.6","y":"10.3","transform":"matrix(-.707 .707 -.707 -.707 64.28 26.626)","fill":"#3F51B5","width":"8","height":"32.7"},"child":[]}]})(props);
};
export function FcLeftUp2 (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"polygon","attr":{"fill":"#3F51B5","points":"19,4 30.7,18 7.3,18"},"child":[]},{"tag":"path","attr":{"fill":"#3F51B5","d":"M27,42h13v-8H27c-2.2,0-4-1.8-4-4V13h-8v17C15,36.6,20.4,42,27,42z"},"child":[]}]})(props);
};
export function FcLeft (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"g","attr":{"fill":"#3F51B5"},"child":[{"tag":"polygon","attr":{"points":"4,24 18,12.3 18,35.7"},"child":[]},{"tag":"rect","attr":{"x":"15","y":"20","width":"27","height":"8"},"child":[]}]}]})(props);
};
export function FcLibrary (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"g","attr":{"fill":"#FF9800"},"child":[{"tag":"rect","attr":{"x":"1","y":"38","width":"46","height":"2"},"child":[]},{"tag":"rect","attr":{"x":"25","y":"18","width":"4","height":"16"},"child":[]},{"tag":"rect","attr":{"x":"31","y":"18","width":"4","height":"16"},"child":[]},{"tag":"rect","attr":{"x":"37","y":"18","width":"4","height":"16"},"child":[]},{"tag":"rect","attr":{"x":"19","y":"18","width":"4","height":"16"},"child":[]},{"tag":"rect","attr":{"x":"13","y":"ground":"new 0 0 48 48"},"child":[{"tag":"circle","attr":{"fill":"#9C27B0","cx":"24","cy":"24","r":"21"},"child":[]},{"tag":"path","attr":{"fill":"#E1BEE7","d":"M20.7,27.2v8.4h-3.9V12.9h8.7c1.3,0,2.5,0.2,3.5,0.5c1,0.4,1.9,0.9,2.6,1.5c0.7,0.6,1.2,1.4,1.6,2.3 c0.4,0.9,0.6,1.8,0.6,2.9c0,1.1-0.2,2.1-0.6,3c-0.4,0.9-0.9,1.6-1.6,2.2c-0.7,0.6-1.6,1.1-2.6,1.4c-1,0.3-2.2,0.5-3.5,0.5H20.7z M20.7,24h4.7c0.8,0,1.4-0.1,2-0.3c0.5-0.2,1-0.5,1.4-0.8c0.4-0.3,0.6-0.8,0.8-1.2c0.2-0.5,0.2-1,0.2-1.6c0-0.5-0.1-1-0.2-1.5 c-0.2-0.5-0.4-0.9-0.8-1.3c-0.4-0.4-0.8-0.7-1.4-0.9c-0.5-0.2-1.2-0.3-2-0.3h-4.7V24z"},"child":[]}]})(props);
};
export function FcSpeaker (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"path","attr":{"fill":"#81D4FA","d":"M28,7.1v2c7.3,1,13,7.3,13,14.9s-5.7,13.9-13,14.9v2c8.4-1,15-8.2,15-16.9S36.4,8.1,28,7.1z"},"child":[]},{"tag":"path","attr":{"fill":"#546E7A","d":"M14,32H7c-1.1,0-2-0.9-2-2V18c0-1.1,0.9-2,2-2h7V32z"},"child":[]},{"tag":"polygon","attr":{"fill":"#78909C","points":"26,42 14,32 14,16 26,6"},"child":[]},{"tag":"path","attr":{"fill":"#03A9F4","d":"M28,17.3v2.1c1.8,0.8,3,2.5,3,4.6s-1.2,3.8-3,4.6v2.1c2.9-0.9,5-3.5,5-6.7S30.9,18.2,28,17.3z"},"child":[]},{"tag":"path","attr":{"fill":"#4FC3F7","d":"M28,12.2v2c4.6,0.9,8,5,8,9.8s-3.4,8.9-8,9.8v2c5.7-1,10-5.9,10-11.8S33.7,13.1,28,12.2z"},"child":[]}]})(props);
};
export function FcSportsMode (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"circle","attr":{"fill":"#FF9800","cx":"28","cy":"9","r":"5"},"child":[]},{"tag":"path","attr":{"fill":"#00796B","d":"M29,27.3l-9.2-4.1c-1-0.5-1.5,1-2,2c-0.5,1-4.1,7.2-3.8,8.3c0.3,0.9,1.1,1.4,1.9,1.4c0.2,0,0.4,0,0.6-0.1 L28.8,31c0.8-0.2,1.4-1,1.4-1.8C30.2,28.4,29.7,27.6,29,27.3z"},"child":[]},{"tag":"path","attr":{"fill":"#009688","d":"M26.8,15.2l-2.2-1c-1.3-0.6-2.9,0-3.5,1.3L9.2,41.1c-0.5,1,0,2.2,1,2.7c0.3,0.1,0.6,0.2,0.9,0.2 c0.8,0,1.5-0.4,1.8-1.1c0,0,9.6-13.3,10.4-14.9s4.9-9.3,4.9-9.3C28.7,17.4,28.2,15.8,26.8,15.2z"},"child":[]},{"tag":"path","attr":{"fill":"#FF9800","d":"M40.5,15.7c-0.7-0.8-2-1-2.8-0.3l-5,4.2l-6.4-3.5c-1.1-0.6-2.6-0.4-3.3,0.9c-0.8,1.3-0.4,2.9,0.8,3.4 l8.3,3.4c0.3,0.1,0.6,0.2,0.9,0.2c0.5,0,0.9-0.2,1.3-0.5l6-5C41.1,17.8,41.2,16.6,40.5,15.7z"},"child":[]},{"tag":"path","attr":{"fill":"#FF9800","d":"M11.7,23.1l3.4-5.1l4.6,0.6l1.5-3.1c0.4-0.9,1.2-1.4,2.1-1.5c-0.1,0-0.2,0-0.2,0h-9c-0.7,0-1.3,0.3-1.7,0.9 l-4,6c-0.6,0.9-0.4,2.2,0.6,2.8C9.2,23.9,9.6,24,10,24C10.6,24,11.3,23.7,11.7,23.1z"},"child":[]}]})(props);
};
export function FcStackOfPhotos (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"rect","attr":{"x":"12.3","y":"12.3","transform":"matrix(.948 .318 -.318 .948 9.725 -6.994)","fill":"#64B5F6","width":"28","height":"28"},"child":[]},{"tag":"rect","attr":{"x":"15.6","y":"15.4","transform":"matrix(.951 .31 -.31 .951 9.176 -6.977)","fill":"#1E88E5","width":"22","height":"20"},"child":[]},{"tag":"rect","attr":{"x":"8.1","y":"8.1","transform":"matrix(.983 .181 -.181 .983 4.385 -3.65)","fill":"#90CAF9","width":"28","height":"28"},"child":[]},{"tag":"rect","attr":{"x":"11.3","y":"11.2","transform":"matrix(.985 .175 -.175 .985 4.048 -3.566)","fill":"#42A5F5","width":"22","height":"20"},"child":[]},{"tag":"rect","attr":{"x":"4","y":"4","fill":"#BBDEFB","width":"28","height":"28"},"child":[]},{"tag":"rect","attr":{"x":"7","y":"7","fill":"#4CAF50","width":"22","height":"20"},"child":[]},{"tag":"path","attr":{"fill":"#fff","d":"M16,13c0-1.1,0.9-2,2-2s2,0.9,2,2s-2,4-2,4S16,14.1,16,13z"},"child":[]},{"tag":"path","attr":{"fill":"#fff","d":"M20,21c0,1.1-0.9,2-2,2s-2-0.9-2-2s2-4,2-4S20,19.9,20,21z"},"child":[]},{"tag":"path","attr":{"fill":"#fff","d":"M13.5,16.7c-1-0.6-1.3-1.8-0.7-2.7c0.6-1,1.8-1.3,2.7-0.7c1,0.6,2.5,3.7,2.5,3.7S14.5,17.3,13.5,16.7z"},"child":[]},{"tag":"path","attr":{"fill":"#fff","d":"M22.5,17.3c1,0.6,1.3,1.8,0.7,2.7c-0.6,1-1.8,1.3-2.7,0.7C19.5,20.2,18,17,18,17S21.5,16.7,22.5,17.3z"},"child":[]},{"tag":"path","attr":{"fill":"#fff","d":"M22.5,16.7c1-0.6,1.3-1.8,0.7-2.7c-0.6-1-1.8-1.3-2.7-0.7C19.5,13.8,18,17,18,17S21.5,17.3,22.5,16.7z"},"child":[]},{"tag":"path","attr":{"fill":"#fff","d":"M13.5,17.3c-1,0.6-1.3,1.8-0.7,2.7c0.6,1,1.8,1.3,2.7,0.7c1-0.6,2.5-3.7,2.5-3.7S14.5,16.7,13.5,17.3z"},"child":[]},{"tag":"circle","attr":{"fill":"#FFC107","cx":"18","cy":"17","r":"2"},"child":[]}]})(props);
};
export function FcStart (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"path","attr":{"fill":"#F44336","d":"M38,42H10c-2.2,0-4-1.8-4-4V10c0-2.2,1.8-4,4-4h28c2.2,0,4,1.8,4,4v28C42,40.2,40.2,42,38,42z"},"child":[]},{"tag":"polygon","attr":{"fill":"#fff","points":"31,24 20,16 20,32"},"child":[]}]})(props);
};
export function FcStatistics (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"g","attr":{"fill":"#37474F"},"child":[{"tag":"rect","attr":{"x":"23","y":"5","width":"2","height":"36"},"child":[]},{"tag":"rect","attr":{"x":"20.5","y":"31.4","transform":"matrix(.707 .707 -.707 .707 33.523 -3.921)","width":"2","height":"14.2"},"child":[]},{"tag":"rect","attr":{"x":"25.5","y":"31.4","transform":"matrix(-.707 .707 -.707 -.707 72.487 46.995)","width":"2","height":"14.2"},"child":[]}]},{"tag":"rect","attr":{"x":"4","y":"8","fill":"#CFD8DC","width":"40","height":"28"},"child":[]},{"tag":"g","attr":{"fill":"#607D8B"},"child":[{"tag":"rect","attr":{"x":"3","y":"7","width":"42","height":"4"},"child":[]},{"tag":"rect","attr":{"x":"3","y":"35","width":"42","height":"2"},"child":[]},{"tag":"circle","attr":{"cx":"31.5","cy":"43.5","r":"1.5"},"child":[]},{"tag":"circle","attr":{"cx":"16.5","cy":"43.5","r":"1.5"},"child":[]}]},{"tag":"g","attr":{"fill":"#C51162"},"child":[{"tag":"polygon","attr":{"points":"31.9,18.9 26,24.9 20,18.9 11.9,26.9 14.1,29.1 20,23.1 26,29.1 34.1,21.1"},"child":[]},{"tag":"polygon","attr":{"points":"36,24 29,17 36,17"},"child":[]}]}]})(props);
};
export function FcSteam (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1.1","x":"0px","y":"0px","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"path","attr":{"fill":"#FFFFFF","d":"M42,38c0,2.209-1.791,4-4,4H10c-2.209,0-4-1.791-4-4V10c0-2.209,1.791-4,4-4h28c2.209,0,4,1.791,4,4V38z"},"child":[]},{"tag":"g","attr":{},"child":[{"tag":"path","attr":{"fill":"#455A64","d":"M18.459,33.645c-0.288,0-0.56-0.057-0.822-0.141l-0.005,0.02l-3.67-1.062\r\n\t\tc0.644,1.878,2.406,3.237,4.5,3.237c2.641,0,4.776-2.136,4.776-4.776s-2.135-4.777-4.776-4.777c-1.141,0-2.175,0.418-2.998,1.087\r\n\t\tL19,28.255c0.029,0.007,0.055,0.018,0.084,0.024l0.049,0.016v0.002c1.177,0.301,2.049,1.359,2.049,2.626\r\n\t\tC21.184,32.424,19.964,33.645,18.459,33.645z"},"child":[]},{"tag":"path","attr":{"fill":"#455A64","d":"M30.923,24.299c3.222,0,5.837-2.615,5.837-5.838c0-3.222-2.615-5.837-5.837-5.837\r\n\t\tc-3.221,0-5.837,2.615-5.837,5.837C25.086,21.684,27.702,24.299,30.923,24.299z M30.92,14.409c2.24,0,4.056,1.813,4.056,4.052\r\n\t\tc0,2.241-1.815,4.053-4.056,4.053c-2.236,0-4.049-1.812-4.049-4.053C26.871,16.223,28.684,14.409,30.92,14.409z"},"child":[]},{"tag":"path","attr":{"fill":"#455A64","d":"M38,6h-2.75h-22.5H10c-2.209,0-4,1.791-4,4v2.75v4.236v7.509l7.027,2.033\r\n\t\tc1.287-1.59,3.229-2.626,5.434-2.626c0.07,0,0.135,0.02,0.204,0.021l3.876-5.355c0-0.035-0.005-0.072-0.005-0.105\r\n\t\tc0-4.63,3.755-8.388,8.387-8.388c4.633,0,8.386,3.757,8.386,8.386c0,4.633-3.753,8.387-8.386,8.387\r\n\t\tc-0.044,0-0.087-0.006-0.132-0.007l-5.33,3.871c0.002,0.07,0.021,0.14,0.021,0.211c0,3.878-3.142,7.021-7.021,7.021\r\n\t\tc-3.593,0-6.52-2.707-6.937-6.188L6,30.158v2.583v2.509V38c0,2.209,1.791,4,4,4h2.75h22.5H38c2.209,0,4-1.791,4-4v-2.75v-22.5V10\r\n\t\tC42,7.791,40.209,6,38,6z"},"child":[]}]}]})(props);
};
export function FcStumbleupon (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1.1","x":"0px","y":"0px","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"path","attr":{"fill":"#E64A19","d":"M24.001,5c-10.494,0-19,8.506-19,19c0,10.493,8.506,19,19,19c10.493,0,19-8.507,19-19\r\n\tC43.001,13.506,34.494,5,24.001,5z"},"child":[]},{"tag":"g","attr":{},"child":[{"tag":"path","attr":{"fill":"#FFFFFF","d":"M24.001,19C23.998,19,24.004,19,24.001,19c-0.062-0.004-1,0-1,1v7.876C22.916,29.888,21.504,33,17.959,33\r\n\t\tc-3.607,0-4.958-3.065-4.958-4.958V24h4v4c0.038,0.709,0.629,1,1,1c0.665,0,0.972-0.361,1-1v-8.124c0-2.01,1.332-5,5-5\r\n\t\tc0.045,0,0.086,0.006,0.131,0.007c0,0,4.869-0.009,4.869,5.117c0,1.104-0.896,1.876-2,1.876s-2-0.771-2-1.876\r\n\t\tC25.001,19.124,24.041,19.003,24.001,19z M35.001,27.876c0,2.01-1.331,5.124-5,5.124s-5-3.114-5-5.124v-3.439\r\n\t\tc0.614,0.272,1.285,0.439,2,0.439c0.712,0,1.386-0.154,2-0.424V28c0.038,1,0.663,1,1,1c0.247,0,1,0,1-1v-4h4V27.876z"},"child":[]}]}]})(props);
};
export function FcSupport (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"path","attr":{"fill":"#607D8B","d":"M44.7,11L36,19.6c0,0-2.6,0-5.2-2.6s-2.6-5.2-2.6-5.2l8.7-8.7c-4.9-1.2-10.8,0.4-14.4,4 c-5.4,5.4-0.6,12.3-2,13.7C12.9,28.7,5.1,34.7,4.9,35c-2.3,2.3-2.4,6-0.2,8.2c2.2,2.2,5.9,2.1,8.2-0.2c0.3-0.3,6.7-8.4,14.2-15.9 c1.4-1.4,8,3.7,13.6-1.8C44.2,21.7,45.9,15.9,44.7,11z M9.4,41.1c-1.4,0-2.5-1.1-2.5-2.5C6.9,37.1,8,36,9.4,36 c1.4,0,2.5,1.1,2.5,2.5C11.9,39.9,10.8,41.1,9.4,41.1z"},"child":[]}]})(props);
};
export function FcSurvey (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"path","attr":{"fill":"#455A64","d":"M36,4H26c0,1.1-0.9,2-2,2s-2-0.9-2-2H12C9.8,4,8,5.8,8,8v32c0,2.2,1.8,4,4,4h24c2.2,0,4-1.8,4-4V8 C40,5.8,38.2,4,36,4z"},"child":[]},{"tag":"path","attr":{"fill":"#fff","d":"M36,41H12c-0.6,0-1-0.4-1-1V8c0-0.6,0.4-1,1-1h24c0.6,0,1,0.4,1,1v32C37,40.6,36.6,41,36,41z"},"child":[]},{"tag":"g","attr":{"fill":"#90A4AE"},"child":[{"tag":"path","attr":{"d":"M26,4c0,1.1-0.9,2-2,2s-2-0.9-2-2h-7v4c0,1.1,0.9,2,2,2h14c1.1,0,2-0.9,2-2V4H26z"},"child":[]},{"tag":"path","attr":{"d":"M24,0c-2.2,0-4,1.8-4,4s1.8,4,4,4s4-1.8,4-4S26.2,0,24,0z M24,6c-1.1,0-2-0.9-2-2s0.9-2,2-2s2,0.9,2,2 S25.1,6,24,6z"},"child":[]}]},{"tag":"g","attr":{"fill":"#CFD8DC"},"child":[{"tag":"rect","attr":{"x":"21","y":"20","width":"12","height":"2"},"child":[]},{"tag":"rect","attr":{"x":"15","y":"19","width":"4","height":"4"},"child":[]}]},{"tag":"g","attr":{"fill":"#03A9F4"},"child":[{"tag":"rect","attr":{"x":"21","y":"29","width":"12","height":"2"},"child":[]},{"tag":"rect","attr":{"x":"15","y":"28","width":"4","height":"4"},"child":[]}]}]})(props);
};
export function FcSwitchCamera (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"g","attr":{"fill":"#5E35B1"},"child":[{"tag":"path","attr":{"d":"M33.9,12.1H14.2L17.6,7c0.4-0.6,1-0.9,1.7-0.9h9.6c0.7,0,1.3,0.3,1.7,0.9L33.9,12.1z"},"child":[]},{"tag":"path","attr":{"d":"M14,11H8V9.2C8,8.5,8.5,8,9.2,8h3.6C13.5,8,14,8.5,14,9.2V11z"},"child":[]},{"tag":"path","attr":{"d":"M40,42H8c-2.2,0-4-1.8-4-4V14c0-2.2,1.8-4,4-4h32c2.2,0,4,1.8,4,4v24C44,40.2,42.2,42,40,42z"},"child":[]}]},{"tag":"path","attr":{"fill":"#E8EAF6","d":"M34,25c0-5.5-4.5-10-10-10c-2.4,0-4.6,0.8-6.3,2.2l1.2,1.6c1.4-1.1,3.1-1.8,5.1-1.8c4.4,0,8,3.6,8,8h-3.5 l4.5,5.6l4.5-5.6H34z"},"child":[]},{"tag":"path","attr":{"fill":"#E8EAF6","d":"M29.1,31.2C27.7,32.3,25.9,33,24,33c-4.4,0-8-3.6-8-8h3.5L15,19.4L10.5,25H14c0,5.5,4.5,10,10,10 c2.4,0,4.6-0.8,6.3-2.2L29.1,31.2z"},"child":[]}]})(props);
};
export function FcSynchronize (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"path","attr":{"fill":"#FF6F00","d":"M38.7,11.9l-3.1,2.5c2.2,2.7,3.4,6.1,3.4,9.5c0,8.3-6.7,15-15,15c-0.9,0-1.9-0.1-2.8-0.3l-0.7,3.9 c1.2,0.2,2.4,0.3,3.5,0.3c10.5,0,19-8.5,19-19C43,19.6,41.5,15.3,38.7,11.9z"},"child":[]},{"tag":"polygon","attr":{"fill":"#FF6F02","points":"31,8 42.9,9.6 33.1,19.4"},"child":[]},{"tag":"path","attr":{"fill":"#FF6F00","d":"M24,5C13.5,5,5,13.5,5,24c0,4.6,1.6,9,4.6,12.4l3-2.6C10.3,31.1,9,27.6,9,24c0-8.3,6.7-15,15-15 c0.9,0,1.9,0.1,2.8,0.3l0.7-3.9C26.4,5.1,25.2,5,24,5z"},"child":[]},{"tag":"polygon","attr":{"fill":"#FF6F02","points":"17,40 5.1,38.4 14.9,28.6"},"child":[]}]})(props);
};
export function FcTabletAndroid (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"path","attr":{"fill":"#37474F","d":"M8,41V7c0-2.2,1.8-4,4-4h24c2.2,0,4,1.8,4,4v34c0,2.2-1.8,4-4,4H12C9.8,45,8,43.2,8,41z"},"child":[]},{"tag":"path","attr":{"fill":"#BBDEFB","d":"M36,6H12c-0.6,0-1,0.4-1,1v31c0,0.6,0.4,1,1,1h24c0.6,0,1-0.4,1-1V7C37,6.4,36.6,6,36,6z"},"child":[]},{"tag":"rect","attr":{"x":"21","y":"41","fill":"#78909C","width":"6","height":"2"},"child":[]}]})(props);
};
export function FcTemplate (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"rect","attr":{"x":"4","y":"7","fill":"#BBDEFB","width":"40","height":"34"},"child":[]},{"tag":"rect","attr":{"x":"9","y":"12","fill":"#3F51B5","width":"30","height":"5"},"child":[]},{"tag":"g","attr":{"fill":"#2196F3"},"child":[{"tag":"rect","attr":{"x":"9","y":"21","width":"13","height":"16"},"child":[]},{"tag":"rect","attr":{"x":"26","y":"21","width":"13","height":"16"},"child":[]}]}]})(props);
};
export function FcTimeline (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"path","attr":{"fill":"#3F51B5","d":"M42,29H20.8c-0.5,0-1-0.2-1.4-0.6l-3.7-3.7c-0.4-0.4-0.4-1,0-1.4l3.7-3.7c0.4-0.4,0.9-0.6,1.4-0.6H42 c0.6,0,1,0.4,1,1v8C43,28.6,42.6,29,42,29z"},"child":[]},{"tag":"rect","attr":{"x":"9","y":"6","fill":"#CFD8DC","width":"2","height":"36"},"child":[]},{"tag":"g","attr":{"fill":"#90A4AE"},"child":[{"tag":"circle","attr":{"cx":"10","cy":"10","r":"3"},"child":[]},{"tag":"circle","attr":{"cx":"10","cy":"24","r":"3"},"child":[]},{"tag":"circle","attr":{"cx":"10","cy":"38","r":"3"},"child":[]}]},{"tag":"path","attr":{"fill":"#448AFF","d":"M34,43H20.8c-0.5,0-1-0.2-1.4-0.6l-3.7-3.7c-0.4-0.4-0.4-1,0-1.4l3.7-3.7c0.4-0.4,0.9-0.6,1.4-0.6H34 c0.6,0,1,0.4,1,1v8C35,42.6,34.6,43,34,43z"},"child":[]},{"tag":"path","attr":{"fill":"#00BCD4","d":"M35,15H20.8c-0.5,0-1-0.2-1.4-0.6l-3.7-3.7c-0.4-0.4-0.4-1,0-1.4l3.7-3.7C19.8,5.2,20.3,5,20.8,5H35 c0.6,0,1,0.4,1,1v8C36,14.6,35.6,15,35,15z"},"child":[]}]})(props);
};
export function FcTodoList (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"g","attr":{"fill":"#3F51B5"},"child":[{"tag":"polygon","attr":{"points":"17.8,18.1 10.4,25.4 6.2,21.3 4,23.5 10.4,29.9 20,20.3"},"child":[]},{"tag":"polygon","attr":{"points":"17.8,5.1 10.4,12.4 6.2,8.3 4,10.5 10.4,16.9 20,7.3"},"child":[]},{"tag":"polygon","attr":{"points":"17.8,31.1 10.4,38.4 6.2,34.3 4,36.5 10.4,42.9 20,33.3"},"child":[]}]},{"tag":"g","attr":{"fill":"#90CAF9"},"child":[{"tag":"rect","attr":{"x":"24","y":"22","width":"20","height":"4"},"child":[]},{"tag":"rect","attr":{"x":"24","y":"9","width":"20","height":"4"},"child":[]},{"tag":"rect","attr":{"x":"24","y":"35","width":"20","height":"4"},"child":[]}]}]})(props);
};
export function FcTouchscreenSmartphone (props) {
  return GenIcon({"tag":"svg","attr":{"version":"1","viewBox":"0 0 48 48","enableBackground":"new 0 0 48 48"},"child":[{"tag":"path","attr":{"fill":"#E38939","d":"M12,40V8c0-2.2,1.8-4,4-4h16c2.2,0,4,1.8,4,4v32c0,2.2-1.8,4-4,4H16C13.8,44,12,42.2,12,40z"},"child":[]},{"tag":"path","attr":{"fill":"#FFF3E0","d":"M32,7H16c-0.6,0-1,0.4-1,1v29c0,0.6,0.4,1,1,1h16c0.6,0,1-0.4,1-1V8C33,7.4,32.6,7,32,7z"},"child":[]},{"tag":"circle","attr":{"fill":"#A6642A","cx":"24","cy":"41","r":"1.5"},"child":[]},{"tag":"circle","attr":{"fill":"#E91E63","cx":"24","cy":"23","r":"2"},"child":[]},{"tag":"circle","attr":{"fill":"none","stroke":"#F48FB1","strokeWidth":"2","strokeMiterlimit":"10","cx":"24","cy":"23","r":"4"},"child":[]2.9375-10.4114v-40.1582c0-3.8515 1.0594-7.4704 2.9375-10.4113 .626-.9804 1.4142-1.8456 2.2029-2.6773 3.1875-3.2787 7.5261-5.3544 12.3375-5.3544zm52.875,62.6171-6.4624,69.0126c-34.3636,5.8734-63.5788,27.2036-80.7808,56.8165-23.9813-1.6232-47.3685-3.7134-70.0596-6.3956l157.3029-119.4336zm25.5568,0 157.3029,119.5823c-22.6822,2.68-46.1028,4.7978-70.0596,6.3956-17.1907-29.661-46.4003-51.075-80.7808-56.9652l-6.4624-69.0126zm-12.7784,100.9905c1.4429,0 2.8327.075 4.2591.1492h.1456 .2912c2.2095.1268 4.4486.2948 6.6092.5946 .4829.0649.9884.222 1.4692.2976 1.3315.2104 2.6574.4692 3.9654.7437 .0505.007.0987-.007.1456,0 .0937.0216.2018-.0216.2912,0 .1081.0216.1924.1261.2962.1485 1.4081.3085 2.7316.6608 4.1125,1.0412 2.1606.5931 4.3739,1.32 6.4625,2.0823 1.0946.4 2.1578.7452 3.2308,1.1898 1.0034.4173 1.9542.8831 2.9374,1.3386 1.3941.6421 2.7604,1.3652 4.1126,2.0822 .94.4987 1.8711.954 2.7908,1.4874 2.4228,1.4083 4.7808,2.969 7.05,4.6108 2.2997,1.667 4.4866,3.4632 6.6092,5.3544 2.0139,1.7938 3.8878,3.6709 5.7283,5.6519 .0843.0915.2068.2047.2912.2976 7.7738,8.449 13.8232,18.4564 17.7721,29.5981 .0894.2573.2068.485.2912.7437 .6508,1.8918 1.2398,3.8508 1.7625,5.8007 .08.302.2205.5888.2962.8924 .583,2.2751 1.0651,4.6457 1.4683,6.9905 .3805,2.1185.6594,4.226.8817,6.3956 .2912,2.8642.4418,5.683.4418,8.6266 0,3.3691-.2213,6.5482-.5874,9.8164-.6003,5.3763-1.7117,10.738-3.2313,15.7658-4.8951,16.1683-14.178,30.2303-26.5841,40.7532-2.0911,1.7759-4.208,3.3444-6.4625,4.9082-13.364,9.2792-29.5137,14.7247-46.8533,14.7247s-33.489-5.4456-46.8534-14.7247c-2.2546-1.5638-4.3715-3.1322-6.4625-4.9082-4.1078-3.4847-7.9157-7.3832-11.3092-11.6013-.0468-.0288 0-.1196 0-.1492-5.0967-6.3445-9.3116-13.2926-12.4841-20.9715v-.1485c-1.0598-2.574-1.9773-5.1882-2.7909-7.8829-1.5237-5.0278-2.6264-10.3895-3.2313-15.7659-.0468-.3856-.1081-.6544-.1457-1.0411-.2867-2.893-.4418-5.8047-.4418-8.7753 0-2.9436.1457-5.7622.4418-8.6266 .2115-2.1593.5189-4.2862.8817-6.3956 .4042-2.3448.885-4.7154 1.4683-6.9905 .0799-.3012.2162-.5924.2961-.8923 .5226-1.9498 1.1116-3.9089 1.7625-5.8007 .0893-.2558.2021-.4893.2914-.7437 3.9485-11.1417 10.0016-21.149 17.7721-29.5981 .0893-.0951.2021-.2025.2914-.2976 1.8363-1.981 3.7144-3.8581 5.7284-5.6519 2.123-1.8912 4.3052-3.6875 6.6091-5.3544 2.2649-1.6418 4.6229-3.2025 7.05-4.6108 .916-.5333 1.8514-.9891 2.7909-1.4874 1.3574-.724 2.7129-1.4339 4.1125-2.0823 .1924-.0887.3949-.2097.5874-.2976l1.0279-.4461c.4324-.1888.884-.4137 1.3221-.5953 1.0679-.4439 2.1414-.7903 3.2308-1.1898 2.0887-.7623 4.3019-1.4893 6.4625-2.0823 .2537-.0721.4821-.2299.7346-.2976 1.1412-.3012 2.2203-.4908 3.3779-.7437l.7346-.1485c1.3113-.2738 2.6338-.5333 3.9653-.7437 .4828-.0764.9837-.2299 1.4692-.2976 2.1611-.2998 4.3969-.4684 6.6092-.5946 1.5726-.0908 3.1006-.1492 4.7-.1492zm0,16.9558c-37.1981,0-67.4158,30.932-67.4158,69.1614 0,27.6508 15.8038,51.4137 38.6284,62.4683 1.614-44.7959 13.8927-79.5728 28.7875-79.5728s27.1712,34.7769 28.7875,79.5728c22.8223-11.0547 38.6284-34.8175 38.6284-62.4683 0-38.2294-30.2206-69.1614-67.4159-69.1614zm-184.3283,30.3417c23.2391,3.0021 47.2806,5.4235 71.9692,7.288-2.6734,10.0704-4.1125,20.5916-4.1125,31.5317 0,18.3224 4.0091,35.6609 11.1625,51.1645l-39.3625,28.557-39.6567-118.5412zm368.6567,0-39.5096,118.5412-39.5096-28.557c7.1534-15.5036 11.1625-32.8421 11.1625-51.1645 0-10.9401-1.4392-21.4613-4.1125-31.5317 24.6534-1.8652 48.7362-4.2878 71.9692-7.288zm-98.4067,119.5823 50.525,23.9462-17.7716,53.2468h-101.3438v-39.7121c27.0038-4.1296 50.987-17.7678 68.5904-37.4809zm-171.8433.1485c17.5963,19.6696 41.6232,33.2082 68.5904,37.3322v39.712h-101.1971l-17.7716-53.2468 50.3784-23.7974z"},"child":[]}]})(props);
};
export function GiAbstract101 (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"m82.9812,21c-16.4203,0-29.6688,12.8852-29.6688,28.9344 0,5.9733 1.8427,11.5246 4.9938,16.1563-5.6437,2.1092-11.258,4.3267-16.7438,6.6093v32.3125c39.8539-31.7511 108.9211-53.9856 189.175-57.8687 .534-.0288 1.0805.0288 1.6156,0-94.3049,5.5834-170.7434,44.1908-190.7906,94.4406v309.1718c-6.9818.8341-13.8751,1.7325-20.5625,2.6438v37.6c69.7866-5.9787 149.8154-9.5469 235-9.5469 85.1277,0 165.2462,3.5757 235.0001,9.5469v-37.6c-6.6852-.9103-13.5836-1.8103-20.5625-2.6438v-309.1718c-20.0473-50.2499-96.4858-88.8572-190.7907-94.4406 80.9709,3.6644 150.6762,25.9069 190.7907,57.8687v-32.3125c-5.4858-2.2826-11.1002-4.5001-16.7438-6.6093 3.151-4.6316 4.9937-10.1829 4.9937-16.1563 0-16.0492-13.2483-28.9344-29.6687-28.9344-16.1278,0-29.35,12.5483-29.8157,28.2-44.7215-11.3344-92.8978-17.6251-143.2031-17.6251s-98.4816,6.2906-143.2031,17.6251c-.4656-15.6517-13.6878-28.2001-29.8156-28.2001zm173.0187,47.8812c94.4624,0 170.9626,110.3658 170.9626,246.3094 0,47.3724-9.2972,91.4224-25.4094,128.9562-13.6597-1.0058-27.8214-1.7743-42.1531-2.4968 19.8934-33.8867 31.8718-77.7319 31.8718-125.5782 0-24.8144-3.2267-48.5179-9.1063-70.3531-22.907,30.9796-43.544,49.4439-52.2875,44.3562-11.3808-6.6223 1.2589-50.4008 28.2-101.6375-3.0473-5.0501-6.1586-9.9662-9.5469-14.5407-17.1971,60.249-40.7968,104.8156-54.1969,101.1969-14.1351-3.8173-11.6239-59.7229 5.7282-124.9906 1.436-5.4013 3.1624-10.7008 4.7001-15.8625-7.266-4.0394-14.9574-7.2036-22.7657-9.4 .3293,7.4602.5873,15.0263.5873,22.9125 0,67.5701-11.9506,122.3469-26.5844,122.3469s-26.5844-54.7767-26.5844-122.3469c0-7.9333.2544-15.5575.5874-23.0594-7.8347,2.1799-15.4773,5.3639-22.7657,9.4 1.5507,5.2008 3.2525,10.5648 4.7001,16.0093 17.3521,65.2678 19.8632,121.1733 5.7281,124.9906-13.4118,3.6219-36.9958-41.0142-54.1969-101.3438-3.3504,4.5236-6.5299,9.404-9.5469,14.3938 27.0378,51.3511 39.6005,95.2974 28.2001,101.9312-8.7579,5.0961-29.4816-13.4299-52.4344-44.5031-5.8899,21.8696-9.1062,45.6382-9.1062,70.4999 0,47.8718 12.1063,91.6839 32.0187,125.5782-14.2533.7185-28.4181,1.4979-42.0062,2.4968-16.1358-37.5338-25.5563-81.5839-25.5563-128.9562 0-135.9436 76.5002-246.3094 170.9625-246.3094zm0,241.0219c47.6449,0 86.2157,24.4538 86.2157,54.6375s-38.5707,54.4906-86.2157,54.4906-86.2156-24.307-86.2156-54.4906 38.5707-54.6375 86.2156-54.6375zm0,21.0031c-42.8805,0-77.6969,15.093-77.6969,33.6344s34.8164,33.4875 77.6969,33.4875 77.6969-14.9462 77.6969-33.4875-34.8164-33.6344-77.6969-33.6344zm0,13.8063c13.2725,0 24.0875,9.1287 24.0875,20.4156s-10.815,20.5625-24.0875,20.5625-24.0875-9.2755-24.0875-20.5625 10.815-20.4156 24.0875-20.4156z"},"child":[]}]})(props);
};
export function GiAbstract102 (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"m21,21.0002c4.4053,21.1214 8.3148,44.4171 11.4562,69.178h76.2281v48.3219h-55.3719c7.6285,26.1221 12.6034,63.7142 13.3656,106.1905h41.2718v31.2843h-41.5656c-.1557,4.8889-.1737,9.6594-.4403,14.3938h42.0063v31.2843h-44.7969c-2.3412,20.0301-5.6809,37.7499-9.8406,51.9937h55.3718v48.3219h-76.2281c-3.1414,24.7609-7.0509,47.9097-11.4562,69.0312 46.2673-8.7542 101.0824-14.9264 160.9749-17.7718v-51.2593-48.3219h35.1031c7.8055,70.0923 22.2158,117.353 38.9219,117.353s31.2461-47.2608 39.0687-117.353h35.1032v48.3219 51.2593c59.8924,2.8455 114.5606,9.0176 160.8279,17.7718-4.4053-21.1214-8.1679-44.2702-11.3093-69.0312h-76.2281v-48.3219h55.3719c-4.1597-14.2438-7.5727-31.9636-9.9875-51.9937h-44.7969v-31.2843h42.0062c-.2789-4.7345-.4237-9.5047-.5873-14.3938h-41.4187v-31.2843h41.1249c.8024-42.4763 6.0309-80.0684 13.6594-106.1905h-55.3719v-48.3219h76.2281c3.1414-24.7609 6.9041-48.0566 11.3094-69.178-46.2674,8.7542-100.9356,15.0732-160.828,17.9187v99.5812h-35.1031c-7.8236-70.1187-22.3613-117.4999-39.0687-117.4999s-31.1151,47.3812-38.9219,117.4999h-35.1031v-99.5812c-59.8925-2.8456-114.7075-9.1645-160.9749-17.9187zm120.2905,171.2561h229.5655v127.6342h-229.5655v-127.6342zm29.375,48.4687v65.2124h170.6687v-65.2124h-85.3344-85.3343z"},"child":[]}]})(props);
};
export function GiAbstract103 (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"m256,21c-129.7869,0-235,105.2131-235,235s105.2131,235 235,235 235-105.2131 235-235-105.2131-235-235-235zm-25.7031,44.0625v27.025c-7e-05,16.5704 11.4341,29.8156 25.7031,29.8156s25.7031-13.2452 25.7032-29.8156v-27.025c85.8583,11.4476 153.7867,79.376 165.2344,165.2344h-27.025c-16.5705,0-29.8156,11.4341-29.8156,25.7031s13.2451,25.7032 29.8156,25.7032h27.025c-11.4477,85.8583-79.3761,153.7867-165.2344,165.2344v-27.025c-7e-05-16.5705-11.4341-29.8156-25.7032-29.8156s-25.7032,13.2451-25.7031,29.8156v27.025c-85.8584-11.4477-153.7867-79.376-165.2344-165.2344h27.025c16.5704,0 29.8156-11.4341 29.8156-25.7032s-13.2452-25.7031-29.8156-25.7031h-27.025c11.4476-85.8584 79.376-153.7867 165.2344-165.2344zm-66.5344,75.4937c-6.158.1175-12.0358,2.342-16.45,6.7562-10.0897,10.0898-8.6327,27.6454 3.0844,39.3625l20.1219,20.1219c-8.369,14.4992-13.2188,31.2589-13.2188,49.2031s4.8497,34.704 13.2188,49.2032l-20.1219,20.1219c-11.717,11.7171-13.1741,29.2728-3.0844,39.3625s27.6454,8.6328 39.3625-3.0843l20.1219-20.1219c14.4992,8.3689 31.2589,13.2188 49.2031,13.2188s34.704-4.8498 49.2032-13.2188l20.1219,20.1219c11.7171,11.717 29.2728,13.1741 39.3625,3.0843s8.6327-27.6454-3.0844-39.3625l-20.1219-20.1219c8.369-14.4992 13.2188-31.2589 13.2188-49.2032s-4.8497-34.7039-13.2188-49.2031l20.1219-20.1219c11.7171-11.7171 13.1741-29.2728 3.0844-39.3625-4.4142-4.4142-10.292-6.6388-16.45-6.7562-7.9174-.1506-16.3216,3.2498-22.9124,9.8406l-20.1219,20.1219c-14.4992-8.369-31.2589-13.2188-49.2032-13.2188s-34.7039,4.8497-49.2031,13.2188l-20.1219-20.1219c-6.5909-6.5909-14.9951-9.9915-22.9125-9.8406zm92.2375,57.8687c31.7978,0 57.575,25.7772 57.575,57.575s-25.7772,57.575-57.575,57.575-57.575-25.7772-57.575-57.575 25.7772-57.575 57.575-57.575z"},"child":[]}]})(props);
};
export function GiAbstract104 (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"m256,21c-129.7862,0-235,105.2131-235,235s105.2137,235 235,235 235-105.2133 235-235-105.2128-235-235-235zm0,5.875c126.5433,0 229.125,102.5828 229.125,229.125s-102.5817,229.125-229.125,229.125-229.1249-102.5832-229.1249-229.125 102.5836-229.125 229.1249-229.125zm0,5.875c-123.2965,0-223.25,99.9524-223.25,223.25s99.9535,223.25 223.25,223.25 223.25-99.9525 223.25-223.25-99.9516-223.25-223.25-223.25zm-216.2,7.05v99.7282c22.7819-42.2058 57.5233-76.9456 99.7284-99.7282h-99.7284zm332.6721,0c42.1115,22.7306 76.9433,57.3566 99.7279,99.4344v-99.4344h-99.7279zm-133.3625,12.7781h33.9278v34.2219h-33.9278v-34.2219zm-19.0938,2.4969 8.6659,33.0468-32.9,8.8125-8.9596-32.9 33.1938-8.9593zm72.1159,0 33.0466,8.9593-8.8125,32.9-33.0467-8.8125 8.8125-33.0468zm-122.9346,16.1562 17.0375,29.6688-29.5221,17.0375-17.1841-29.5218 29.6688-17.1844zm173.7529,0 29.6692,17.1844-17.1846,29.5218-29.5221-17.0375 17.0375-29.6688zm-218.6966,28.9344 24.2341,24.0875-24.2341,24.2344-24.0875-24.2344 24.0875-24.0875zm263.6409,0 24.0875,24.0875-24.0875,24.2344-24.2346-24.2344 24.2346-24.0875zm-131.8943,2.9375c50.6614,0 95.5849,24.741 123.375,62.7157-20.8821,4.7442-43.3082,8.2112-66.6808,10.4281-11.0869-19.8569-32.2707-33.1938-56.6943-33.1938s-45.6074,13.3369-56.6933,33.1938c-23.4225-2.2214-45.7601-5.6691-66.6817-10.4281 27.8315-37.9747 72.7161-62.7157 123.375-62.7157zm-167.5841,36.425 29.5217,17.1844-17.0376,29.5219-29.6683-17.0375 17.1842-29.6688zm335.3159,0 17.0375,29.6688-29.6693,17.0375-16.8903-29.5219 29.5221-17.1844zm-167.7318,21.15c27.2934,0 49.4971,22.0588 49.4971,49.3503 0,22.9271-15.6909,42.1543-36.8653,47.7341v103.1062h-25.2625v-103.1062c-21.1749-5.5798-36.7192-24.8071-36.7192-47.7341 0-27.2914 22.0608-49.3503 49.3499-49.3503zm0,14.1c-18.8,0-33.9278,16.4019-33.9278,36.7185s15.1279,36.8659 33.9278,36.8659 34.075-16.5477 34.075-36.8659-15.2735-36.7185-34.075-36.7185zm-133.6558,7.1969c21.8188,5.8974 45.4204,10.361 70.2058,13.2188-.8267,4.1506-1.4683,8.3787-1.4683,12.7779v160.8284c19.098,11.0266 41.2796,17.1841 64.9182,17.1841s45.8185-6.1574 64.9192-17.1841v-160.8284c0-4.3992-.4944-8.6273-1.3221-12.7779 24.7864-2.8577 48.3866-7.3214 70.2063-13.2188 12.1392,21.9312 19.0938,47.1861 19.0938,74.025 0,30.6046-9.0597,59.2407-24.5279,83.1313 .5492-8.5573.7005-17.6847-1.0284-26.8779-1.8546-9.2261-5.5211-17.4906-9.3999-25.2625-4.3165-8.743-9.268-17.1762-14.3938-25.4096-4.1975-6.745-8.5295-13.434-13.0721-19.975-1.3832-1.9914-2.8411-3.9052-4.2591-5.875-.3856-.5391-.6363-1.0791-1.0283-1.6154-.1081-.1412-.3337-.3005-.4418-.4418 .0649.1549.08.4324.1456.5873 .2443.5931.64,1.0232.8807,1.6159 .8864,2.1704 1.6521,4.4307 2.4971,6.6091 2.7744,7.1619 5.4201,14.3684 7.7847,21.5909 2.8839,8.8224 5.304,17.6142 7.1966,26.4375 1.6877,7.9886 3.0399,15.7478 2.4966,22.9125-.4418,7.5171-2.7523,15.1401-5.2875,23.2057-2.8698,8.8398-6.3055,17.515-10.1342,26.2909-3.1368,7.1694-6.4616,14.2556-9.9875,21.2966-.4086.8173-.7581,1.6821-1.175,2.4971-4.5717,2.7688-9.3765,5.351-14.2466,7.6375v-14.9812c-19.4021,10.2338-41.4559,16.1563-64.9192,16.1563s-45.5162-5.9225-64.9183-16.1563v14.9812c-4.8405-2.2692-9.407-4.8932-13.9533-7.6375-3.8225-7.9627-7.7795-15.9688-11.6034-23.9404-3.7966-8.6814-7.2859-17.3665-10.1342-26.1442-2.5347-8.0657-4.7046-15.8338-5.1408-23.3529-.5405-7.1623.8084-14.7768 2.4971-22.7654 1.8743-8.7913 4.3127-17.6175 7.1971-26.4375 3.7591-10.1515 7.6554-20.3242 11.4558-30.55-6.2759,9.2957-12.6303,18.6811-18.9466,28.0529-5.1268,8.2358-9.9166,16.6328-14.2467,25.4096-3.8798,7.7719-7.5454,16.0364-9.4,25.2625-1.739,9.244-1.5773,18.424-1.0284,27.025-15.5598-23.9248-24.675-52.6005-24.675-83.2784 0-26.8426 7.0782-52.0919 19.2409-74.025zm-58.3096,4.8469 32.9,8.9593-8.8125,32.9-33.0471-8.8125 8.9596-33.0469zm384.0779,0 8.9596,33.0469-33.1938,8.8125-8.6658-32.9 32.8999-8.9593zm-395.5342,52.1406h34.2216v34.2216h-34.2216v-34.2216zm372.7688,0h34.075v34.2216h-34.075v-34.2216zm-337.225,44.3562 8.8125,33.0471-32.9,8.8125-8.9596-33.0471 33.0471-8.8125zm335.7562,0 33.1938,8.8125-8.9596,33.0471-32.8999-8.8125 8.6658-33.0471zm-322.9784,42.5938 17.0376,29.5216-29.5217,17.1847-17.1842-29.6688 29.6683-17.0375zm310.2,0 29.6693,17.0375-17.0375,29.6688-29.5221-17.1847 16.8903-29.5216zm-286.8466,37.7466 24.2341,24.0875-24.2341,24.2346-24.0875-24.2346 24.0875-24.0875zm263.6409,0 24.0875,24.0875-24.0875,24.2346-24.2346-24.2346 24.2346-24.0875zm-348.0943,8.8125v99.7284h99.7284c-42.2051-22.7828-76.946-57.5219-99.7284-99.7284zm432.4.2962c-22.7846,42.0773-57.6164,76.7036-99.7279,99.4342h99.7279v-99.4342zm-315.4875,21.2966 29.5221,17.0375-17.0375,29.6688-29.6688-17.1846 17.1841-29.5217zm198.7221,0 17.1846,29.5217-29.6692,17.1846-17.0375-29.6688 29.5221-17.0375zm-159.6529,21.0034 32.9,8.8125-8.6659,33.0467-33.1938-8.8125 8.9596-33.0466zm120.5842,0 8.8125,33.0466-33.0466,8.8125-8.8125-33.0467 33.0467-8.8125zm-77.2563,10.2807h33.9278v34.075h-33.9278v-34.075z"},"child":[]}]})(props);
};
export function GiAbstract105 (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"m256,11c-83.484,0-157.231,10.8258-202.8907,27.4094-26.5885,62.0598-42.1094,136.9446-42.1094,217.5906 0,55.1164 7.2716,107.4897 20.3656,154.9625 57.6344,15.2522 136.711,24.8062 224.4813,24.8062s167.1107-9.554 224.7874-24.8062c13.0493-47.4734 20.3657-99.845 20.3657-154.9625 0-80.6461-15.3679-155.5308-41.9563-217.5906-45.6596-16.5836-119.5598-27.4094-203.0437-27.4094zm.1533,62.3219c25.8452,0 46.7031,81.8135 46.7031,182.6781s-20.8579,125.5625-46.7031,125.5625-46.8563-24.6979-46.8563-125.5625 21.011-182.6781 46.8563-182.6781zm-128.1657,22.05c22.7258,0 41.0375,71.9377 41.0375,160.6281s-18.3117,103.3594-41.0375,103.3594-41.1906-14.669-41.1906-103.3594 18.4649-160.6281 41.1906-160.6281zm256.3313,0c22.7257,0 41.0375,71.9377 41.0375,160.6281s-18.3118,103.3594-41.0375,103.3594-41.1907-14.669-41.1907-103.3594 18.465-160.6281 41.1907-160.6281zm-347.7469,333.2c4.8955,15.5677 10.418,30.5696 16.5375,44.8656 45.6581,16.6316 119.3953,27.5625 202.8907,27.5625s157.3855-10.9309 203.0437-27.5625c6.1195-14.296 11.6545-29.298 16.5375-44.8656-52.9175,16.5242-131.646,27.1031-219.7343,27.1031-88.0113,0-166.3832-10.6037-219.2751-27.1031z"},"child":[]}]})(props);
};
export function GiAbstract106 (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 512 512"},"child":[{"tag":"path","attr":{"d":"m21,21v140.5594h470v-140.5594h-30.8437v102.0781h-117.5v-102.0781h-27.9062v102.0781h-117.5v-102.0781h-27.9062v102.0781h-117.5v-102.0781h-30.8437zm91.5031,0c-17.7715,0-32.3125,14.3942-32.3125,32.1657s14.541,32.1656 32.3125,32.1656 32.1657-14.3941 32.1657-32.1656-14.3942-32.16/**
 * @fileoverview Validate props indentation in JSX
 * @author Yannick Croissant

 * This rule has been ported and modified from eslint and nodeca.
 * @author Vitaly Puzrin
 * @author Gyandeep Singh
 * @copyright 2015 Vitaly Puzrin. All rights reserved.
 * @copyright 2015 Gyandeep Singh. All rights reserved.
 Copyright (C) 2014 by Vitaly Puzrin

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the 'Software'), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */

'use strict';

const repeat = require('string.prototype.repeat');

const astUtil = require('../util/ast');
const docsUrl = require('../util/docsUrl');
const getText = require('../util/eslint').getText;
const reportC = require('../util/report');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

const messages = {
  wrongIndent: 'Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.',
};

/** @type {import('eslint').Rule.RuleModule} */
module.exports = {
  meta: {
    docs: {
      description: 'Enforce props indentation in JSX',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('jsx-indent-props'),
    },
    fixable: 'code',

    messages,

    schema: [{
      anyOf: [{
        enum: ['tab', 'first'],
      }, {
        type: 'integer',
      }, {
        type: 'object',
        properties: {
          indentMode: {
            anyOf: [{
              enum: ['tab', 'first'],
            }, {
              type: 'integer',
            }],
          },
          ignoreTernaryOperator: {
            type: 'boolean',
          },
        },
      }],
    }],
  },

  create(context) {
    const extraColumnStart = 0;
    let indentType = 'space';
    /** @type {number|'first'} */
    let indentSize = 4;
    const line = {
      isUsingOperator: false,
      currentOperator: false,
    };
    let ignoreTernaryOperator = false;

    if (context.options.length) {
      const isConfigObject = typeof context.options[0] === 'object';
      const indentMode = isConfigObject
        ? context.options[0].indentMode
        : context.options[0];

      if (indentMode === 'first') {
        indentSize = 'first';
        indentType = 'space';
      } else if (indentMode === 'tab') {
        indentSize = 1;
        indentType = 'tab';
      } else if (typeof indentMode === 'number') {
        indentSize = indentMode;
        indentType = 'space';
      }

      if (isConfigObject && context.options[0].ignoreTernaryOperator) {
        ignoreTernaryOperator = true;
      }
    }

    /**
     * Reports a given indent violation and properly pluralizes the message
     * @param {ASTNode} node Node violating the indent rule
     * @param {number} needed Expected indentation character count
     * @param {number} gotten Indentation character count in the actual node/code
     */
    function report(node, needed, gotten) {
      const msgContext = {
        needed,
        type: indentType,
        characters: needed === 1 ? 'character' : 'characters',
        gotten,
      };

      reportC(context, messages.wrongIndent, 'wrongIndent', {
        node,
        data: msgContext,
        fix(fixer) {
          return fixer.replaceTextRange([node.range[0] - node.loc.start.column, node.range[0]],
            repeat(indentType === 'space' ? ' ' : '\t', needed)
          );
        },
      });
    }

    /**
     * Get node indent
     * @param {ASTNode} node Node to examine
     * @return {number} Indent
     */
    function getNodeIndent(node) {
      let src = getText(context, node, node.loc.start.column + extraColumnStart);
      const lines = src.split('\n');
      src = lines[0];

      let regExp;
      if (indentType === 'space') {
        regExp = /^[ ]+/;
      } else {
        regExp = /^[\t]+/;
      }

      const indent = regExp.exec(src);
      const useOperator = /^([ ]|[\t])*[:]/.test(src) || /^([ ]|[\t])*[?]/.test(src);
      const useBracket = /[<]/.test(src);

      line.currentOperator = false;
      if (useOperator) {
        line.isUsingOperator = true;
        line.currentOperator = true;
      } else if (useBracket) {
        line.isUsingOperator = false;
      }

      return indent ? indent[0].length : 0;
    }

    /**
     * Check indent for nodes list
     * @param {ASTNode[]} nodes list of node objects
     * @param {number} indent needed indent
     */
    function checkNodesIndent(nodes, indent) {
      let nestedIndent = indent;
      nodes.forEach((node) => {
        const nodeIndent = getNodeIndent(node);
        if (
          line.isUsingOperator
          && !line.currentOperator
          && indentSize !== 'first'
          && !ignoreTernaryOperator
        ) {
          nestedIndent += indentSize;
          line.isUsingOperator = false;
        }
        if (
          node.type !== 'ArrayExpression' && node.type !== 'ObjectExpression'
          && nodeIndent !== nestedIndent && astUtil.isNodeFirstInLine(context, node)
        ) {
          report(node, nestedIndent, nodeIndent);
        }
      });
    }

    return {
      JSXOpeningElement(node) {
        if (!node.attributes.length) {
          return;
        }
        let propIndent;
        if (indentSize === 'first') {
          const firstPropNode = node.attributes[0];
          propIndent = firstPropNode.loc.start.column;
        } else {
          const elementIndent = getNodeIndent(node);
          propIndent = elementIndent + indentSize;
        }
        checkNodesIndent(node.attributes, propIndent);
      },
    };
  },
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hasProp;
exports.hasAnyProp = hasAnyProp;
exports.hasEveryProp = hasEveryProp;

var _propName = require('./propName');

var _propName2 = _interopRequireDefault(_propName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_OPTIONS = {
  spreadStrict: true,
  ignoreCase: true
};

/**
 * Returns boolean indicating whether an prop exists on the props
 * property of a JSX element node.
 */
function hasProp() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS;

  var propToCheck = options.ignoreCase ? prop.toUpperCase() : prop;

  return props.some(function (attribute) {
    // If the props contain a spread prop, then refer to strict param.
    if (attribute.type === 'JSXSpreadAttribute') {
      return !options.spreadStrict;
    }

    var currentProp = options.ignoreCase ? (0, _propName2.default)(attribute).toUpperCase() : (0, _propName2.default)(attribute);

    return propToCheck === currentProp;
  });
}

/**
 * Given the props on a node and a list of props to check, this returns a boolean
 * indicating if any of them exist on the node.
 */
function hasAnyProp() {
  var nodeProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS;

  var propsToCheck = typeof props === 'string' ? props.split(' ') : props;

  return propsToCheck.some(function (prop) {
    return hasProp(nodeProps, prop, options);
  });
}

/**
 * Given the props on a node and a list of props to check, this returns a boolean
 * indicating if all of them exist on the node
 */
function hasEveryProp() {
  var nodeProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS;

  var propsToCheck = typeof props === 'string' ? props.split(' ') : props;

  return propsToCheck.every(function (prop) {
    return hasProp(nodeProps, prop, options);
  });
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               = __HMR_DIRECT_TARGET__;
const base = __BASE__ || "/";
const hmrTimeout = __HMR_TIMEOUT__;
const transport = normalizeModuleRunnerTransport(
  (() => {
    let wsTransport = createWebSocketModuleRunnerTransport({
      createConnection: () => new WebSocket(`${socketProtocol}://${socketHost}`, "vite-hmr"),
      pingInterval: hmrTimeout
    });
    return {
      async connect(handlers) {
        try {
          await wsTransport.connect(handlers);
        } catch (e) {
          if (!hmrPort) {
            wsTransport = createWebSocketModuleRunnerTransport({
              createConnection: () => new WebSocket(
                `${socketProtocol}://${directSocketHost}`,
                "vite-hmr"
              ),
              pingInterval: hmrTimeout
            });
            try {
              await wsTransport.connect(handlers);
              console.info(
                "[vite] Direct websocket connection fallback. Check out https://vite.dev/config/server-options.html#server-hmr to remove the previous connection error."
              );
            } catch (e2) {
              if (e2 instanceof Error && e2.message.includes("WebSocket closed without opened.")) {
                const currentScriptHostURL = new URL(import.meta.url);
                const currentScriptHost = currentScriptHostURL.host + currentScriptHostURL.pathname.replace(/@vite\/client$/, "");
                console.error(
                  `[vite] failed to connect to websocket.
your current setup:
  (browser) ${currentScriptHost} <--[HTTP]--> ${serverHost} (server)
  (browser) ${socketHost} <--[WebSocket (failing)]--> ${directSocketHost} (server)
Check out your Vite / network configuration and https://vite.dev/config/server-options.html#server-hmr .`
                );
              }
            }
            return;
          }
          console.error(`[vite] failed to connect to websocket (${e}). `);
          throw e;
        }
      },
      async disconnect() {
        await wsTransport.disconnect();
      },
      send(data) {
        wsTransport.send(data);
      }
    };
  })()
);
let willUnload = false;
if (typeof window !== "undefined") {
  window.addEventListener("beforeunload", () => {
    willUnload = true;
  });
}
function cleanUrl(pathname) {
  const url = new URL(pathname, "http://vite.dev");
  url.searchParams.delete("direct");
  return url.pathname + url.search;
}
let isFirstUpdate = true;
const outdatedLinkTags = /* @__PURE__ */ new WeakSet();
const debounceReload = (time) => {
  let timer;
  return () => {
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    timer = setTimeout(() => {
      location.reload();
    }, time);
  };
};
const pageReload = debounceReload(50);
const hmrClient = new HMRClient(
  {
    error: (err) => console.error("[vite]", err),
    debug: (...msg) => console.debug("[vite]", ...msg)
  },
  transport,
  async function importUpdatedModule({
    acceptedPath,
    timestamp,
    explicitImportRequired,
    isWithinCircularImport
  }) {
    const [acceptedPathWithoutQuery, query] = acceptedPath.split(`?`);
    const importPromise = import(
      /* @vite-ignore */
      base + acceptedPathWithoutQuery.slice(1) + `?${explicitImportRequired ? "import&" : ""}t=${timestamp}${query ? `&${query}` : ""}`
    );
    if (isWithinCircularImport) {
      importPromise.catch(() => {
        console.info(
          `[hmr] ${acceptedPath} failed to apply HMR as it's within a circular import. Reloading page to reset the execution order. To debug and break the circular import, you can run \`vite --debug hmr\` to log the circular dependency path if a file change triggered it.`
        );
        pageReload();
      });
    }
    return await importPromise;
  }
);
transport.connect(handleMessage);
async function handleMessage(payload) {
  switch (payload.type) {
    case "connected":
      console.debug(`[vite] connected.`);
      break;
    case "update":
      notifyListeners("vite:beforeUpdate", payload);
      if (hasDocument) {
        if (isFirstUpdate && hasErrorOverlay()) {
          location.reload();
          return;
        } else {
          if (enableOverlay) {
            clearErrorOverlay();
          }
          isFirstUpdate = false;
        }
      }
      await Promise.all(
        payload.updates.map(async (update) => {
          if (update.type === "js-update") {
            return hmrClient.queueUpdate(update);
          }
          const { path, timestamp } = update;
          const searchUrl = cleanUrl(path);
          const el = Array.from(
            document.querySelectorAll("link")
          ).find(
            (e) => !outdatedLinkTags.has(e) && cleanUrl(e.href).includes(searchUrl)
          );
          if (!el) {
            return;
          }
          const newPath = `${base}${searchUrl.slice(1)}${searchUrl.includes("?") ? "&" : "?"}t=${timestamp}`;
          return new Promise((resolve) => {
            const newLinkTag = el.cloneNode();
            newLinkTag.href = new URL(newPath, el.href).href;
            const removeOldEl = () => {
              el.remove();
              console.debug(`[vite] css hot updated: ${searchUrl}`);
              resolve();
            };
            newLinkTag.addEventListener("load", removeOldEl);
            newLinkTag.addEventListener("error", removeOldEl);
            outdatedLinkTags.add(el);
            el.after(newLinkTag);
          });
        })
      );
      notifyListeners("vite:afterUpdate", payload);
      break;
    case "custom": {
      notifyListeners(payload.event, payload.data);
      if (payload.event === "vite:ws:disconnect") {
        if (hasDocument && !willUnload) {
          console.log(`[vite] server connection lost. Polling for restart...`);
          const socket = payload.data.webSocket;
          await waitForSuccessfulPing(socket.url);
          location.reload();
        }
      }
      break;
    }
    case "full-reload":
      notifyListeners("vite:beforeFullReload", payload);
      if (hasDocument) {
        if (payload.path && payload.path.endsWith(".html")) {
          const pagePath = decodeURI(location.pathname);
          const payloadPath = base + payload.path.slice(1);
          if (pagePath === payloadPath || payload.path === "/index.html" || pagePath.endsWith("/") && pagePath + "index.html" === payloadPath) {
            pageReload();
          }
          return;
        } else {
          pageReload();
        }
      }
      break;
    case "prune":
      notifyListeners("vite:beforePrune", payload);
      await hmrClient.prunePaths(payload.paths);
      break;
    case "error": {
      notifyListeners("vite:error", payload);
      if (hasDocument) {
        const err = payload.err;
        if (enableOverlay) {
          createErrorOverlay(err);
        } else {
          console.error(
            `[vite] Internal Server Error
${err.message}
${err.stack}`
          );
        }
      }
      break;
    }
    case "ping":
      break;
    default: {
      const check = payload;
      return check;
    }
  }
}
function notifyListeners(event, data) {
  hmrClient.notifyListeners(event, data);
}
const enableOverlay = __HMR_ENABLE_OVERLAY__;
const hasDocument = "document" in globalThis;
function createErrorOverlay(err) {
  clearErrorOverlay();
  const { customElements } = globalThis;
  if (customElements) {
    const ErrorOverlayConstructor = customElements.get(overlayId);
    document.body.appendChild(new ErrorOverlayConstructor(err));
  }
}
function clearErrorOverlay() {
  document.querySelectorAll(overlayId).forEach((n) => n.close());
}
function hasErrorOverlay() {
  return document.querySelectorAll(overlayId).length;
}
async function waitForSuccessfulPing(socketUrl, ms = 1e3) {
  async function ping() {
    const socket = new WebSocket(socketUrl, "vite-ping");
    return new Promise((resolve) => {
      function onOpen() {
        resolve(true);
        close();
      }
      function onError() {
        resolve(false);
        close();
      }
      function close() {
        socket.removeEventListener("open", onOpen);
        socket.removeEventListener("error", onError);
        socket.close();
     /**
 * @fileoverview Rule to enforce `default` clauses in `switch` statements to be last
 * @author Milos Djermanovic
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//----------------