xport declare const GiMassDriver: IconType;
export declare const GiMasterOfArms: IconType;
export declare const GiMatchHead: IconType;
export declare const GiMatchTip: IconType;
export declare const GiMatchbox: IconType;
export declare const GiMaterialsScience: IconType;
export declare const GiMatryoshkaDolls: IconType;
export declare const GiMatterStates: IconType;
export declare const GiMayanPyramid: IconType;
export declare const GiMazeCornea: IconType;
export declare const GiMazeSaw: IconType;
export declare const GiMaze: IconType;
export declare const GiMeal: IconType;
export declare const GiMeatCleaver: IconType;
export declare const GiMeatHook: IconType;
export declare const GiMeat: IconType;
export declare const GiMechaHead: IconType;
export declare const GiMechaMask: IconType;
export declare const GiMechanicGarage: IconType;
export declare const GiMechanicalArm: IconType;
export declare const GiMedalSkull: IconType;
export declare const GiMedal: IconType;
export declare const GiMedallist: IconType;
export declare const GiMedicalDrip: IconType;
export declare const GiMedicalPackAlt: IconType;
export declare const GiMedicalPack: IconType;
export declare const GiMedicalThermometer: IconType;
export declare const GiMedicinePills: IconType;
export declare const GiMedicines: IconType;
export declare const GiMedievalBarracks: IconType;
export declare const GiMedievalGate: IconType;
export declare const GiMedievalPavilion: IconType;
export declare const GiMeditation: IconType;
export declare const GiMedusaHead: IconType;
export declare const GiMeepleArmy: IconType;
export declare const GiMeepleCircle: IconType;
export declare const GiMeepleGroup: IconType;
export declare const GiMeepleKing: IconType;
export declare const GiMeeple: IconType;
export declare const GiMegabot: IconType;
export declare const GiMegaphone: IconType;
export declare const GiMeltingIceCube: IconType;
export declare const GiMeltingMetal: IconType;
export declare const GiMenhir: IconType;
export declare const GiMermaid: IconType;
export declare const GiMeshBall: IconType;
export declare const GiMeshNetwork: IconType;
export declare const GiMetalBar: IconType;
export declare const GiMetalBoot: IconType;
export declare const GiMetalDisc: IconType;
export declare const GiMetalGolemHead: IconType;
export declare const GiMetalHand: IconType;
export declare const GiMetalPlate: IconType;
export declare const GiMetalScales: IconType;
export declare const GiMetalSkirt: IconType;
export declare const GiMeteorImpact: IconType;
export declare const GiMetroid: IconType;
export declare const GiMetronome: IconType;
export declare const GiMexico: IconType;
export declare const GiMicrochip: IconType;
export declare const GiMicrophone: IconType;
export declare const GiMicroscopeLens: IconType;
export declare const GiMicroscope: IconType;
export declare const GiMiddleArrow: IconType;
export declare const GiMidnightClaw: IconType;
export declare const GiMightyBoosh: IconType;
export declare const GiMightyForce: IconType;
export declare const GiMightyHorn: IconType;
export declare const GiMightySpanner: IconType;
export declare const GiMilitaryAmbulance: IconType;
export declare const GiMilitaryFort: IconType;
export declare const GiMilkCarton: IconType;
export declare const GiMilleniumKey: IconType;
export declare const GiMimicChest: IconType;
export declare const GiMineExplosion: IconType;
export declare const GiMineTruck: IconType;
export declare const GiMineWagon: IconType;
export declare const GiMinefield: IconType;
export declare const GiMiner: IconType;
export declare const GiMineralHeart: IconType;
export declare const GiMineralPearls: IconType;
export declare const GiMinerals: IconType;
export declare const GiMiniSubmarine: IconType;
export declare const GiMinigun: IconType;
export declare const GiMiningHelmet: IconType;
export declare const GiMining: IconType;
export declare const GiMinions: IconType;
export declare const GiMinotaur: IconType;
export declare const GiMiracleMedecine: IconType;
export declare const GiMirrorMirror: IconType;
export declare const GiMisdirection: IconType;
export declare const GiMissileLauncher: IconType;
export declare const GiMissileMech: IconType;
export declare const GiMissilePod: IconType;
export declare const GiMissileSwarm: IconType;
export declare const GiMiteAlt: IconType;
export declare const GiMite: IconType;
export declare const GiMoai: IconType;
export declare const GiModernCity: IconType;
export declare const GiMoebiusStar: IconType;
export declare const GiMoebiusTrefoil: IconType;
export declare const GiMoebiusTriangle: IconType;
export declare const GiMokaPot: IconType;
export declare const GiMoldova: IconType;
export declare const GiMolecule: IconType;
export declare const GiMolotov: IconType;
export declare const GiMonaLisa: IconType;
export declare const GiMonclerJacket: IconType;
export declare const GiMoneyStack: IconType;
export declare const GiMongolia: IconType;
export declare const GiMonkFace: IconType;
export declare const GiMonkeyWrench: IconType;
export declare const GiMonkey: IconType;
export declare const GiMonoWheelRobot: IconType;
export declare const GiMonsterGrasp: IconType;
export declare const GiMonsteraLeaf: IconType;
export declare const GiMonumentValley: IconType;
export declare const GiMoonBats: IconType;
export declare const GiMoonClaws: IconType;
export declare const GiMoonOrbit: IconType;
export declare const GiMoon: IconType;
export declare const GiMooringBollard: IconType;
export declare const GiMorbidHumour: IconType;
export declare const GiMorgueFeet: IconType;
export declare const GiMorphBall: IconType;
export declare const GiMortar: IconType;
export declare const GiMountainCave: IconType;
export declare const GiMountainClimbing: IconType;
export declare const GiMountainRoad: IconType;
export declare const GiMountains: IconType;
export declare const GiMountaintop: IconType;
export declare const GiMountedKnight: IconType;
export declare const GiMouse: IconType;
export declare const GiMouthWatering: IconType;
export declare const GiMove: IconType;
export declare const GiMovementSensor: IconType;
export declare const GiMp40: IconType;
export declare const GiMp5: IconType;
export declare const GiMp5K: IconType;
export declare const GiMucousPillar: IconType;
export declare const GiMugShot: IconType;
export declare const GiMultiDirections: IconType;
export declare const GiMultipleTargets: IconType;
export declare const GiMummyHead: IconType;
export declare const GiMuscleFat: IconType;
export declare const GiMuscleUp: IconType;
export declare const GiMuscularTorso: IconType;
export declare const GiMushroomCloud: IconType;
export declare const GiMushroomGills: IconType;
export declare const GiMushroomHouse: IconType;
export declare const GiMushroom: IconType;
export declare const GiMushroomsCluster: IconType;
export declare const GiMushrooms: IconType;
export declare const GiMusicSpell: IconType;
export declare const GiMusicalKeyboard: IconType;
export declare const GiMusicalNotes: IconType;
export declare const GiMusicalScore: IconType;
export declare const GiMusket: IconType;
export declare const GiMussel: IconType;
export declare const GiMustache: IconType;
export declare const GiMute: IconType;
export declare const GiNachos: IconType;
export declare const GiNailedFoot: IconType;
export declare const GiNailedHead: IconType;
export declare const GiNails: IconType;
export declare const GiNanoBot: IconType;
export declare const GiNautilusShell: IconType;
export declare const GiNeckBite: IconType;
export declare const GiNecklaceDisplay: IconType;
export declare const GiNecklace: IconType;
export declare const GiNeedleDrill: IconType;
export declare const GiNeedleJaws: IconType;
export declare const GiNefertiti: IconType;
export declare const GiNestBirds: IconType;
export declare const GiNestEggs: IconType;
export declare const GiNestedEclipses: IconType;
export declare const GiNestedHearts: IconType;
export declare const GiNestedHexagons: IconType;
export declare const GiNetworkBars: IconType;
export declare const GiNewBorn: IconType;
export declare const GiNewShoot: IconType;
export declare const GiNewspaper: IconType;
export declare const GiNextButton: IconType;
export declare const GiNigeria: IconType;
export declare const GiNightSky: IconType;
export declare const GiNightSleep: IconType;
export declare const GiNightVision: IconType;
export declare const GiNinjaArmor: IconType;
export declare const GiNinjaHead: IconType;
export declare const GiNinjaHeroicStance: IconType;
export declare const GiNinjaMask: IconType;
export declare const GiNinjaStar: IconType;
export declare const GiNinjaVelociraptor: IconType;
export declare const GiNodular: IconType;
export declare const GiNoodleBall: IconType;
export declare const GiNoodles: IconType;
export declare const GiNorthStarShuriken: IconType;
export declare const GiNoseFront: IconType;
export declare const GiNoseSide: IconType;
export declare const GiNotebook: IconType;
export declare const GiNothingToSay: IconType;
export declare const GiNuclearBomb: IconType;
export declare const GiNuclearPlant: IconType;
export declare const GiNuclearWaste: IconType;
export declare const GiNuclear: IconType;
export declare const GiNunFace: IconType;
export declare const GiNunchaku: IconType;
export declare const GiNurseFemale: IconType;
export declare const GiNurseMale: IconType;
export declare const GiOBrick: IconType;
export declare const GiOakLeaf: IconType;
export declare const GiOak: IconType;
export declare const GiOasis: IconType;
export declare const GiOat: IconType;
export declare const GiObelisk: IconType;
export declare const GiObservatory: IconType;
export declare const GiOcarina: IconType;
export declare const GiOccupy: IconType;
export declare const GiOctogonalEye: IconType;
export declare const GiOctoman: IconType;
export declare const GiOctopus: IconType;
export declare const GiOden: IconType;
export declare const GiOfficeChair: IconType;
export declare const GiOffshorePlatform: IconType;
export declare const GiOgre: IconType;
export declare const GiOilDrum: IconType;
export declare const GiOilPump: IconType;
export declare const GiOilRig: IconType;
export declare const GiOilySpiral: IconType;
export declare const GiOldKing: IconType;
export declare const GiOldLantern: IconType;
export declare const GiOldMicrophone: IconType;
export declare const GiOldWagon: IconType;
export declare const GiOlive: IconType;
export declare const GiOmega: IconType;
export declare const GiOnSight: IconType;
export declare const GiOnTarget: IconType;
export declare const GiOneEyed: IconType;
export declare const GiOni: IconType;
export declare const GiOnigori: IconType;
export declare const GiOpenBook: IconType;
export declare const GiOpenChest: IconType;
export declare const GiOpenFolder: IconType;
export declare const GiOpenGate: IconType;
export declare const GiOpenPalm: IconType;
export declare const GiOpenTreasureChest: IconType;
export declare const GiOpenWound: IconType;
export declare const GiOpenedFoodCan: IconType;
export declare const GiOpeningShell: IconType;
export declare const GiOphiuchus: IconType;
export declare const GiOppidum: IconType;
export declare const GiOppositeHearts: IconType;
export declare const GiOppression: IconType;
export declare const GiOrangeSlice: IconType;
export declare const GiOrange: IconType;
export declare const GiOrbDirection: IconType;
export declare const GiOrbWand: IconType;
export declare const GiOrbit: IconType;
export declare const GiOrbitalRays: IconType;
export declare const GiOrbital: IconType;
export declare const GiOrcHead: IconType;
export declare const GiOre: IconType;
export declare const GiOrganigram: IconType;
export declare const GiOstrich: IconType;
export declare const GiOuroboros: IconType;
export declare const GiOutbackHat: IconType;
export declare const GiOverInfinity: IconType;
export declare const GiOverdose: IconType;
export declare const GiOverdrive: IconType;
export declare const GiOverhead: IconType;
export declare const GiOverkill: IconType;
export declare const GiOverlordHelm: IconType;
export declare const GiOvermind: IconType;
export declare const GiOwl: IconType;
export declare const GiOysterPearl: IconType;
export declare const GiOyster: IconType;
export declare const GiP90: IconType;
export declare const GiPackedPlanks: IconType;
export declare const GiPaddleSteamer: IconType;
export declare const GiPaddles: IconType;
export declare const GiPadlockOpen: IconType;
export declare const GiPadlock: IconType;
export declare const GiPagoda: IconType;
export declare const GiPaintBrush: IconType;
export declare const GiPaintBucket: IconType;
export declare const GiPaintRoller: IconType;
export declare const GiPaintedPottery: IconType;
export declare const GiPalette: IconType;
export declare const GiPalisade: IconType;
export declare const GiPalmTree: IconType;
export declare const GiPalm: IconType;
export declare const GiPanFlute: IconType;
export declare const GiPanda: IconType;
export declare const GiPangolin: IconType;
export declare const GiPanzerfaust: IconType;
export declare const GiPaperArrow: IconType;
export declare const GiPaperBagCrumpled: IconType;
export declare const GiPaperBagFolded: IconType;
export declare const GiPaperBagOpen: IconType;
export declare const GiPaperBoat: IconType;
export declare const GiPaperBomb: IconType;
export declare const GiPaperClip: IconType;
export declare const GiPaperCrane: IconType;
export declare const GiPaperFrog: IconType;
export declare const GiPaperLantern: IconType;
export declare const GiPaperPlane: IconType;
export declare const GiPaperTray: IconType;
export declare const GiPaperWindmill: IconType;
export declare const GiPaper: IconType;
export declare const GiPapers: IconType;
export declare const GiPapyrus: IconType;
export declare const GiParachute: IconType;
export declare const GiParaguay: IconType;
export declare const GiParanoia: IconType;
export declare const GiParasaurolophus: IconType;
export declare const GiParkBench: IconType;
export declare const GiParmecia: IconType;
export declare const GiParrotHead: IconType;
export declare const GiPartyFlags: IconType;
export declare const GiPartyHat: IconType;
export declare const GiPartyPopper: IconType;
export declare const GiPassport: IconType;
export declare const GiPathDistance: IconType;
export declare const GiPathTile: IconType;
export declare const GiPauldrons: IconType;
export declare const GiPauseButton: IconType;
export declare const GiPawFront: IconType;
export declare const GiPawHeart: IconType;
export declare const GiPawPrint: IconType;
export declare const GiPaw: IconType;
export declare const GiPawn: IconType;
export declare const GiPayMoney: IconType;
export declare const GiPc: IconType;
export declare const GiPeaceDove: IconType;
export declare const GiPeach: IconType;
export declare const GiPeaks: IconType;
export declare const GiPeanut: IconType;
export declare const GiPear: IconType;
export declare const GiPearlEarring: IconType;
export declare const GiPearlNecklace: IconType;
export declare const GiPeas: IconType;
export declare const GiPegasus: IconType;
export declare const GiPelvisBone: IconType;
export declare const GiPencilBrush: IconType;
export declare const GiPencilRuler: IconType;
export declare const GiPencil: IconType;
export declare const GiPendantKey: IconType;
export declare const GiPendulumSwing: IconType;
export declare const GiPenguin: IconType;
export declare const GiPentacle: IconType;
export declare const GiPentagramRose: IconType;
export declare const GiPentarrowsTornado: IconType;
export declare const GiPerfumeBottle: IconType;
export declare const GiPeriscope: IconType;
export declare const GiPerpendicularRings: IconType;
export declare const GiPersonInBed: IconType;
export declare const GiPerson: IconType;
export declare const GiPerspectiveDiceFive: IconType;
export declare const GiPerspectiveDiceFour: IconType;
export declare const GiPerspectiveDiceOne: IconType;
export declare const GiPerspectiveDiceSixFacesFive: IconType;
export declare const GiPerspectiveDiceSixFacesFour: IconType;
export declare const GiPerspectiveDiceSixFacesOne: IconType;
export declare const GiPerspectiveDiceSixFacesRandom: IconType;
export declare const GiPerspectiveDiceSixFacesSix: IconType;
export declare const GiPe.928l.673-231.008c0-.223-.88-.367-.88-.607l1.264-12.704c.143-6.496-1.36-12.288-5.569-16.448zm372.046 57.47l151.249-.4c12.928.303 24.912-8.641 26.88-23.857l-.032-16.431c-.32-12.945-11.01-23.633-23.921-23.921H674.734c-.256-.016-.416-.112-.64-.112l-13.696-.272c-6.448-.176-12.288 4.352-16.4 8.545-4.209 4.143-5.712 9.935-5.585 16.431l1.264 11.697c0 .24-.88.384-.88.607l.672 231.008c.288 12.928 10.977 20.608 23.921 20.928l17.424.032c12.944.288 23.184-10.976 22.896-23.903l-.88-154.528 267.264 263.024c12.497 12.496 32.752 12.496 45.248 0 12.496-12.496 12.497-32.752 0-45.248z"},"child":[]}]})(props);
};
export function SlSizeFullscreen (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M685.904 383.184l275.264-273.572-.896 155.072c-.289 12.928 9.967 24.176 22.912 23.888l16.416-.016c12.944-.304 23.648-8 23.92-20.928l.672-231.008c0-.223-.88-.399-.88-.623l1.264-11.712c.128-6.496-1.391-12.288-5.584-16.431-4.143-4.176-9.951-6.72-16.4-6.544l-11.696.272c-.223 0-.399.08-.64.113L760.77.687c-12.928.288-23.632 10.976-23.92 23.92l-.032 16.417c1.967 15.248 13.952 24.16 26.88 23.872l151.248.4L640.657 337.92c-12.496 12.496-12.496 32.752 0 45.264 12.496 12.48 32.752 12.48 45.247 0zM339.088 640.812L63.825 913.532l.88-154.224c.304-12.944-9.969-24.192-22.897-23.904l-17.423.032c-12.96.32-23.649 8-23.921 20.944l-.672 231.008c0 .224.88.367.88.623l-1.264 11.68c-.144 6.496 1.376 12.32 5.584 16.433 4.128 4.192 9.952 6.72 16.384 6.56l11.712-.288c.223 0 .383-.096.64-.096l230.495 1.008c12.928-.32 23.617-11.009 23.92-23.936l.032-16.432c-1.967-15.216-13.952-24.16-26.88-23.872l-151.247-.4L384.32 686.076c12.496-12.497 12.496-32.752 0-45.248s-32.737-12.512-45.233-.016zm685.122 346.56l-.672-231.01c-.288-12.944-10.992-20.624-23.92-20.944l-16.416-.032c-12.944-.289-23.184 10.975-22.912 23.903l.896 155.072-275.28-273.552c-12.496-12.496-32.752-12.496-45.248 0s-12.496 32.752 0 45.248L914.93 958.649l-151.232.4c-12.928-.288-24.912 8.657-26.88 23.872l.032 16.432c.304 12.944 11.008 23.633 23.92 23.936l229.504-1.007c.24 0 .416.095.64.095l11.696.288c6.448.16 12.272-2.368 16.4-6.56 4.193-4.128 5.696-9.936 5.584-16.432l-1.263-11.68c0-.255.88-.399.88-.622zM110.049 65.321l151.264-.397c12.928.288 24.912-8.64 26.88-23.873l-.032-16.431C287.84 11.677 277.15.972 264.24.7l-230.512.992c-.256-.032-.416-.112-.64-.112l-11.712-.273C14.945 1.132 9.105 3.676 4.992 7.851.784 11.995-.735 17.787-.592 24.283L.672 35.995c0 .223-.88.384-.88.624l.672 231.008c.288 12.928 10.977 20.624 23.921 20.928l17.424.015c12.928.288 23.183-10.96 22.895-23.888l-.88-154.224 275.264 272.72c12.48 12.497 32.753 12.497 45.25 0s12.496-32.768 0-45.264z"},"child":[]}]})(props);
};
export function SlSocialBehance (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M376.743 414.841c15.924-9.676 23.987-27.214 23.987-51.806 0-27.213-10.682-45.555-31.848-54.425-17.74-6.046-40.72-9.07-68.133-9.07H148.157v129.612h167.106c24.995 0 45.757-4.838 61.48-14.311zm-16.528-51.806c0 9.272-1.611 15.32-4.635 17.134-9.272 5.643-22.778 8.466-40.517 8.466H188.676v-48.58h112.076c22.375 0 40.516 2.216 53.819 6.45 2.016 1.008 5.643 2.62 5.643 16.529v.001zm14.717 167.709c-13.707-6.249-33.26-9.676-57.852-9.877H148.16v156.02h166.904c24.995 0 44.75-3.428 58.658-10.28 25.6-12.7 38.5-37.291 38.5-72.97.203-30.236-12.295-51.402-37.29-62.892zm-186.256 30.64h128.402c24.592.202 36.283 4.031 41.121 6.249 7.257 3.427 13.707 7.86 13.707 26.002 0 28.825-10.885 34.066-16.126 36.688-3.83 1.814-15.118 6.047-40.718 6.047H188.675v-74.986zm659.553-108.65c-17.94-15.32-40.313-23.182-66.72-23.182-28.624 0-51.402 8.265-67.326 24.794-15.924 16.328-26.003 38.702-29.833 66.52l-.202 1.815h194.52l-.202-1.613c-2.217-30.035-12.296-53.014-30.237-68.334zm-104.617 29.228c3.427-3.427 12.698-12.095 37.895-12.095 15.723 0 28.422 4.032 38.703 12.095h-76.598zm283.008 22.173c-6.047-38.904-19.552-73.777-40.111-103.812-18.949-28.22-42.533-50.394-70.551-66.52V172.946H647.46v162.47c-16.328 9.876-31.244 21.569-45.153 35.477-31.648 31.849-52.41 72.769-62.69 121.952-7.459-10.885-16.329-20.762-26.206-29.43a204.002 204.002 0 0 0 3.427-4.031c23.584-28.422 35.476-65.108 35.476-109.253 0-42.129-11.288-79.219-33.663-110.261-36.485-49.79-96.554-75.792-178.395-77.203H-3.63v651.087h323.326c31.447 0 61.48-2.822 88.895-8.668 30.639-6.45 57.65-18.545 80.428-36.082 20.157-15.118 36.888-33.865 50.192-55.836 5.241-8.265 9.877-16.932 13.707-26.003 13.304 32.454 32.654 59.263 58.456 80.025 49.991 40.315 108.447 60.674 173.757 60.674 79.42 0 142.715-24.995 188.068-74.38 30.035-31.85 47.169-64.907 51.2-98.369l2.62-22.576h2.823l.605-38.299c1.008-37.493-.403-67.931-3.83-90.104h.003zm-584.16-38.301l-3.226 1.611 3.427 1.21c28.825 10.482 50.797 27.213 65.512 49.992 14.715 22.778 22.173 50.796 22.173 83.048 0 33.461-8.466 63.9-25.398 90.71-10.682 17.739-24.188 32.655-40.112 44.75-17.94 13.706-39.71 23.382-64.1 28.421-24.795 5.241-51.805 7.862-80.63 7.862H36.891V203.183H338.65C407.79 204.19 457.377 224.55 486 263.655c17.335 23.988 26.003 53.015 26.003 86.678 0 34.469-8.869 62.487-26.205 83.451-9.877 11.692-24.39 22.375-43.339 32.05zm339.049-165.091c-10.08 0-19.957.403-29.43 1.411h-64.101v-88.693h187.666v88.693h-64.1c-9.878-.806-19.957-1.411-30.036-1.411h.001zm-99.984 293.493c1.814 42.935 16.935 73.374 45.155 90.71 17.134 10.683 37.896 16.126 61.883 16.126 25.6 0 46.564-6.652 62.487-19.754 8.668-7.055 16.329-16.73 22.779-28.824h110.463c-3.427 24.19-16.932 48.983-40.517 73.978-37.493 40.718-90.709 61.279-158.438 61.279-55.836 0-105.827-17.335-148.359-51.805-42.532-34.268-64.102-91.111-64.102-168.517 0-72.567 19.553-129.209 57.852-167.912 32.655-32.857 74.18-52.007 123.565-57.047h55.03c25.6 2.62 49.386 8.668 70.954 18.343 29.228 13.101 53.619 34.065 72.567 62.286 17.134 24.794 28.422 54.224 33.46 87.08 3.025 19.35 4.234 46.967 3.629 82.443h-308.41v1.614h.003zm144.128 55.635c-8.87 7.257-20.964 10.683-37.09 10.683-16.53 0-29.63-3.225-40.314-9.877-5.242-3.225-11.692-8.063-16.933-17.739h107.036c-4.031 7.66-8.266 13.304-12.7 16.932z"},"child":[]}]})(props);
};
export function SlSocialDribbble (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M511.984.272C442.128.272 375.52 14.383 314.8 39.839a32.015 32.015 0 0 0-6.145 2.672C127.391 121.328.271 302.064.271 512.016c0 282.16 229.568 511.712 511.712 511.712 282.192 0 511.744-229.568 511.744-511.712C1023.727 229.824 794.175.272 511.983.272zm447.745 511.744c0 3.584-.192 7.12-.272 10.67-49.025-13.007-173.393-37.439-326.801-3.742-13.52-30.896-28.512-62.575-45.28-94.816-1.408-2.704-2.784-5.28-4.176-7.952 164.128-63.344 233.888-148.672 262.768-201.952C916.657 293.44 959.73 397.776 959.73 512.016zM797.537 167.438c-14.912 35.2-69.04 126-244.719 191.888-78.897-144.224-140.225-230.672-174.593-274.64 42.256-13.264 87.184-20.416 133.76-20.416 108.432 0 207.983 38.768 285.552 103.168zM316.05 109.519c27.216 33.28 90.384 117.056 175.104 270.447-200 60.288-362.448 53.04-418.832 47.792 26.816-140.144 119.072-257.312 243.729-318.239h-.001zM64.273 512.014c0-6.896.21-13.745.53-20.577 19.249 1.935 49.153 4.079 88.289 4.079 86.895 0 217.712-10.752 369.008-58.144a2450.562 2450.562 0 0 1 8.544 16.273c14.431 27.776 27.487 55.185 39.407 82.064-27.376 8.609-55.392 19.073-83.872 31.97-182.624 82.703-268.192 200.703-298.673 252.335-76.273-80.32-123.232-188.752-123.232-308zM236.1 864.236c16.24-30.752 90.607-154.082 276.447-238.258 27.968-12.672 55.52-22.784 82.384-30.912 60.736 154.32 81.808 281.568 88.177 330.593-52.752 21.905-110.528 34.065-171.12 34.065-104.016 0-199.792-35.76-275.888-95.488zm507.518 30.798c-9.232-61.6-32.145-177.392-85.969-315.664 148.448-29.552 265.952-.56 295.616 8.08-22.223 130.208-100.735 241.488-209.647 307.584z"},"child":[]}]})(props);
};
export function SlSocialDropbox (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M1023.42 224.752a32.048 32.048 0 0 0-14.976-24.914L723.26 21.87c-11.6-7.216-26.431-6.32-37.055 2.289L511.98 165.103 337.789 24.159c-10.592-8.56-25.536-9.535-37.056-2.287L15.549 199.84A32.046 32.046 0 0 0 .572 224.752c-.752 10.224 3.472 20.16 11.312 26.75L177.1 390.32 35.564 501.503c-8.096 6.32-12.624 16.177-12.224 26.417s5.681 19.664 14.225 25.36l130.976 87.312c-6.432 5.84-10.544 14.208-10.544 23.6v128.335c0 11.12 5.776 21.44 15.248 27.28l321.968 182.433c5.12 3.152 10.944 4.72 16.752 4.72s11.632-1.6 16.784-4.751l318.224-182.432a32.013 32.013 0 0 0 15.216-27.248V642c0-2.065-.24-4.08-.608-6.033l124.048-82.688a31.97 31.97 0 0 0 14.224-25.328c.4-10.256-4.095-20.08-12.16-26.416L846.781 390.384l165.312-138.88c7.856-6.592 12.08-16.528 11.328-26.751zM736.673 390.654L511.985 531.438 287.297 390.654 511.985 244.43zM86.801 230.847L315.265 88.255l142.368 115.184-227.344 147.968zm143.12 199.376l225.969 141.6-128.064 98.032-218-145.312zm-7.903 246l89.344 59.567c11.344 7.569 26.32 7.057 37.183-1.215l129.408-99.04v282.8l-255.936-143.68v-98.432zm576.191 98.431L541.953 920.335V632.559l132.656 101.968c5.712 4.4 12.624 6.624 19.504 6.624a31.81 31.81 0 0 0 17.744-5.376l86.336-57.568v96.448h.016zm115.248-250.175L695.426 669.806l-127.44-97.936 226-141.632zM793.666 351.405L566.321 203.437l142.4-115.184 228.464 142.592z"},"child":[]}]})(props);
};
export function SlSocialFacebook (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M581.76 80.496c3.808 0 5.999.16 5.999.16h83.568l-.431 96h-83.008c-45.68 0-44.624 39.007-44.624 39.007v152.192h161.632l-22.56 95.872h-139.6v479.776h-95.904l-.064-479.776H319.36l-.256-95.872h127.712V218.671C446.83 88.591 554.864 80.495 581.76 80.495zm89.567.159h.16-.16zm-89.567-64.16c-23.008 0-67.97 3.809-110.562 29.473-40.32 24.256-88.368 73.935-88.368 172.688v85.183h-63.712c-17.008 0-33.312 6.784-45.344 18.817a64.003 64.003 0 0 0-18.655 45.408l.256 95.872c.128 35.248 28.752 63.776 64 63.776h63.408l.064 415.776c0 35.344 28.657 64 64 64h95.905c35.343 0 64-28.656 64-64V527.712h75.6c28.4 0 53.407-18.72 61.407-45.967l22.56-95.873c5.68-19.343 1.903-40.255-10.192-56.368a63.912 63.912 0 0 0-51.217-25.664h-97.632v-63.152l63.632-.032c35.216 0 63.84-28.464 64-63.712l.431-92.752a64.3 64.3 0 0 0 .097-3.536c0-35.344-28.592-64-63.935-64h-81.936c-1.84-.096-4.496-.16-7.807-.161z"},"child":[]}]})(props);
};
export function SlSocialFoursqare (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M145 75.8c.8-1.8 1.598-3.799 2.197-5.599 14.4-46.2 45.801-69.8 94.4-69.8 115.2-.2 230.4 0 345.602 0h197.8c14.4 0 28.6 1.2 42.4 5.2 29.2 8.401 46.4 30.201 50 60.201 4.2 34.2-4.2 66.8-11 99.6-30.2 146.6-60.8 293.199-91.2 439.999-3.4 16-7.4 31.8-15 46.399-17.4 33.4-47.4 43.8-82.6 44.001-50.6.2-101.2.2-151.8 0-9.2 0-16.2 2.6-22.2 9.6C467.8 747.2 432 788.8 396 830.6c-50.2 58.4-100 117.2-150.8 175.2-15.6 17.8-37 22-59.8 16.8-21-4.8-33-19.2-38.4-39.401-.6-2-1.4-3.8-2-5.8V75.8zm86.198 848.401c1.4-2.6 2.004-4.202 3.004-5.402 32.2-40.4 64.4-80.6 96.8-121.001 36.6-45.6 73.2-91.2 109.4-137 15.6-19.599 34.199-29.799 60.199-29.2 57.6 1.2 115.399.401 172.999.2 27.8 0 39.4-10 44.999-37.2 8.6-42.599 17.6-85.399 26-127.998 5.6-28.4-8-44.6-36.6-44.6-62.2 0-124.4-1.8-186.4.6-51.8 1.8-77-21-74-74.6 2.2-40.8 21.4-61.6 62.4-61.8h237.2c24.6 0 36.4-9.4 41.4-33.4 9-42.6 17.8-85.2 26.6-128 6.2-30.599-6.8-46.599-37.8-46.599h-508.4c-30.4 0-41.4 11-41.4 41.8v789.2c0 4-1.2 8.6 3.6 15z"},"child":[]}]})(props);
};
export function SlSocialGithub (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M158.6 522.6c-11.6 0-22.4-7.402-26-19.002-29.4-91.8-33.6-254 29.4-327.6-14-53.2-6.2-125.2 19.599-163.8 5.4-8 14.2-12.6 24-12.2 73.4 3.201 121.2 33.8 163.2 61.8 59.8-15.599 118-21 187-17.2 17 1 33.8 4.8 48.6 8.2 14 3.2 28.4 6.601 36.8 5.801 7.6-.8 21.2-10 32.2-17.6 10.2-7 21-14.2 32.2-19.2 32-14 60.8-20.4 99.6-21.8 15-.4 27.8 11.199 28.399 26.4s-11.2 27.799-26.4 28.2c-32.2 1.2-53.8 5.8-79.6 17.2-6.6 3-14.8 8.4-23.4 14.4-17 11.6-36.4 24.8-58 26.8-17.4 1.6-35.4-2.4-54.4-7-13.2-3-27-6.2-39.2-7-67.4-3.8-123.4 2-181.4 18.6-7.6 2.2-15.8 1-22.6-3.6l-6.8-4.6C305.198 85.2 270.6 62 220 55.8c-12.6 32.2-14.199 85.6-1.6 117.2 4.401 10.8 1.201 23.399-7.599 30.8-49.4 42-55.6 190.6-26.2 282.8 4.6 14.4-3.4 29.8-17.8 34.4-2.8 1.2-5.6 1.6-8.2 1.6zm207.999 269.998c-2 0-4.002-.2-6.002-.6-14.8-3.2-24-17.8-20.8-32.6l1.8-7.8c8.4-38 16.2-68.6 25.4-91.4-112.2-23.4-194-76.8-232.8-152.4-6.8-13.4-1.6-30 11.801-36.8s30-1.599 36.8 11.802c35 68.2 117.4 114.4 232.2 130.2 11 1.6 20 9.6 22.8 20.199 2.8 10.8-1.2 22.2-10.2 28.8-5.8 5.2-16.4 27-32.6 101.2l-1.8 8c-2.8 12.6-14 21.399-26.6 21.399zm-50.403 200.2c-1.8 0-3.4-.2-5.2-.6-14.8-3-24.6-16.8-21.6-31.6 5-25.4 22.8-36 33.4-42.2 7.2-4.2 9.4-5.8 10.6-8.6 6.2-13.2 4.6-47.4 3.2-74.8-.6-11.6-1.199-23.4-1.399-34.8-63.4 11-132.2 14.4-168.601-45.8-7.2-12-11.8-24.2-16-35.2-4.8-12.4-8.8-23.2-15.4-31.2-9.599-11.6-7.8-28.8 3.8-38.4s28.8-8 38.4 3.8c12.2 15 18.6 31.8 24.2 46.6 3.6 9.6 7 18.6 11.6 26.2 19.6 32.4 62.399 30.4 144.8 13.8 8.6-1.8 17.399.8 23.8 6.6 6.4 6 9.6 14.6 8.6 23.199-2 17.4-.8 40.2.2 62.2 2 38.6 3.8 75-8.4 100.8-8.8 18.6-23 27-32.4 32.4-2.6 1.6-6.6 3.8-7.4 4.8-1.8 13.4-13.2 22.801-26.2 22.801zm397.599-5.2c-9 0-17.6-4.397-23-12.397-2.2-3.6-5.4-5.8-11-9.6-8.8-6.2-20.8-14.6-29.8-32-16.2-31.8-13.6-78-11-126.8 1.599-30 3.198-61-.002-85.4-2.8-20.6-10-29.8-20-42.6-6.4-8.4-13.8-17.801-19.6-30.202-3.8-8.2-3.2-17.6 1.2-25.4 4.6-7.8 12.6-12.8 21.6-13.4 102.6-7.6 183.6-56 222.6-132.6 6.8-13.4 23.2-18.8 36.8-12 13.4 6.8 18.8 23.2 12 36.8-41.6 82.2-121 137.6-221.4 156.6 9 13.2 17.8 30 21.2 55.8 4 29.4 2.2 63 .4 95.4-2 37.6-4.2 80.2 5.201 99 2.4 4.8 5.4 7 12.2 11.8 7.4 5 17.4 12 25.6 24.599s4.601 29.6-7.998 37.8c-4.6 3.2-9.8 4.6-15 4.6zm155.4-470.596c-2.4 0-5.002-.4-7.402-.999-14.6-4.2-23-19.2-18.8-33.8 30.2-106.2 9.6-244.2-43.2-289.2-8.599-7.4-11.8-19.2-8-29.8 12.8-36.6 4.2-91.6-10.399-124.8-6-13.8.2-30 14-36s30 .2 36 14c16.8 38 27.8 97.8 16.8 147.6 65.2 72 78 225.6 47.4 333.2-3.6 12-14.399 19.8-26.399 19.799zm-245.601 507.401c-5 0-10.2-1.4-14.8-4.4-5-3.2-20-12.8-47.8-56-12.6-19.6-21.8-117.2-27.399-290.4-.4-15 11.4-27.799 26.4-28.2s27.8 11.4 28.2 26.4c3.6 113.4 12 242 19.6 264 20.4 31.6 30 38 30.4 38.2 12.6 8.2 16.399 25 8.199 37.8-5 8.2-13.8 12.6-22.8 12.6zm-207.401 0c-9 0-17.8-4.4-23-12.6-8.2-12.6-4.4-29.6 8.2-37.8.4-.2 10-6.6 30.4-38.2 7.6-21.8 15.8-150.6 19.6-264 .4-15 13.2-27 28.2-26.4 15 .4 27 13.2 26.4 28.2-5.6 173.2-14.8 271-27.4 290.4-27.8 43-42.8 52.8-47.8 56-4.4 3-9.6 4.4-14.6 4.4z"},"child":[]}]})(props);
};
export function SlSocialGoogle (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M707 360c-70-75-128-87-184-88h-2c-126 0-245 104-245 248 0 151 136 239 244 239h1c60 0 133-11 197-103H472V401l523 2c5 26 14 91 14 125 0 289-194 495-493 495C232 1023 1 797 1 515S232 8 516 8c139 0 288 55 382 180zm-187 93v154h263c-12 65-81 195-263 195-159 0-287-130-287-285 0-156 131-287 287-287 91 0 152 40 185 72l126-119C751 108 646 63 520 63 264 63 56 264 56 517c0 251 208 453 464 453 270 0 445-185 445-442 0-29-2-52-6-75H520z"},"child":[]}]})(props);
};
export function SlSocialInstagram (props) {
  return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 1024 1024"},"child":[{"tag":"path","attr":{"d":"M511 4c138 0 155 1 209 3 53 2 90 11 123 24 34 13 62 30 90 58s45 56 58 90c13 33 22 70 24 123 2 54 3 71 3 209s-1 155-3 209c-2 53-11 90-24 123-13 34-30 62-58 90s-56 45-90 58c-33 13-70 22-123 24-54 2-71 3-209 3s-155-1-209-3c-53-2-90-11-123-24-34-13-62-30-90-58s-45-56-58-90C18 810 9 773 7 720c-2-54-3-71-3-209s1-155 3-209c2-53 11-90 24-123 13-34 30-62 58-90s56-45 90-58c33-13 70-22 123-24 54-2 71-3 209-3zm0 66c-144 0-161 1-217 3-52 2-81 12-100 19-49 20-82 53-102 102-7 19-17 48-19 100-2 56-3 73-3 217s1 161 3 217c2 52 12 81 19 100 20 49 53 82 102 102 19 7 48 17 100 19 56 2 73 3 217 3s161-1 217-3c52-2 81-12 100-19 49-20 82-53 102-102 7-19 17-48 19-100 2-56 3-73 3-217s-1-161-3-217c-2-52-12-81-19-100-20-49-53-82-102-102-19-7-48-17-100-19-56-2-73-3-217-3zm0 644c112 0 203-91 203-203s-91-203-203-203-203 91-203 203 91 203 203 203zm0-463c144 0 260 116 260 260S655 771 511 771 251 655 251 511s116-260 260-260zm332-10c0 34-28 60-62 60s-60-26-60-60 26-62 60-62 62 28 62 62z"},"child":[]}]})(props);
};
export function SlSocialLinkedin (props) {
  return quest$jscomp$2;
    var prevResumableState = currentResumableState;
    currentResumableState = request$jscomp$2.resumableState;
    try {
      var pingedTasks = request$jscomp$2.pingedTasks,
        i;
      for (i = 0; i < pingedTasks.length; i++) {
        var task = pingedTasks[i],
          request = request$jscomp$2,
          segment = task.blockedSegment;
        if (null === segment) {
          var request$jscomp$0 = request;
          if (0 !== task.replay.pendingTasks) {
            switchContext(task.context);
            try {
              "number" === typeof task.replay.slots
                ? resumeNode(
                    request$jscomp$0,
                    task,
                    task.replay.slots,
                    task.node,
                    task.childIndex
                  )
                : retryNode(request$jscomp$0, task);
              if (
                1 === task.replay.pendingTasks &&
                0 < task.replay.nodes.length
              )
                throw Error(
                  "Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering."
                );
              task.replay.pendingTasks--;
              task.abortSet.delete(task);
              finishedTask(request$jscomp$0, task.blockedBoundary, null);
            } catch (thrownValue) {
              resetHooksState();
              var x =
                thrownValue === SuspenseException
                  ? getSuspendedThenable()
                  : thrownValue;
              if (
                "object" === typeof x &&
                null !== x &&
                "function" === typeof x.then
              ) {
                var ping = task.ping;
                x.then(ping, ping);
                task.thenableState = getThenableStateAfterSuspending();
              } else {
                task.replay.pendingTasks--;
                task.abortSet.delete(task);
                var errorInfo = getThrownInfo(task.componentStack);
                request = void 0;
                var request$jscomp$1 = request$jscomp$0,
                  boundary = task.blockedBoundary,
                  error$jscomp$0 =
                    12 === request$jscomp$0.status
                      ? request$jscomp$0.fatalError
                      : x,
                  replayNodes = task.replay.nodes,
                  resumeSlots = task.replay.slots;
                request = logRecoverableError(
                  request$jscomp$1,
                  error$jscomp$0,
                  errorInfo
                );
                abortRemainingReplayNodes(
                  request$jscomp$1,
                  boundary,
                  replayNodes,
                  resumeSlots,
                  error$jscomp$0,
                  request
                );
                request$jscomp$0.pendingRootTasks--;
                0 === request$jscomp$0.pendingRootTasks &&
                  completeShell(request$jscomp$0);
                request$jscomp$0.allPendingTasks--;
                0 === request$jscomp$0.allPendingTasks &&
                  completeAll(request$jscomp$0);
              }
            } finally {
            }
          }
        } else if (
          ((request$jscomp$0 = void 0),
          (request$jscomp$1 = segment),
          0 === request$jscomp$1.status)
        ) {
          request$jscomp$1.status = 6;
          switchContext(task.context);
          var childrenLength = request$jscomp$1.children.length,
            chunkLength = request$jscomp$1.chunks.length;
          try {
            retryNode(request, task),
              pushSegmentFinale(
                request$jscomp$1.chunks,
                request.renderState,
                request$jscomp$1.lastPushedText,
                request$jscomp$1.textEmbedded
              ),
              task.abortSet.delete(task),
              (request$jscomp$1.status = 1),
              finishedTask(request, task.blockedBoundary, request$jscomp$1);
          } catch (thrownValue) {
            resetHooksState();
            request$jscomp$1.children.length = childrenLength;
            request$jscomp$1.chunks.length = chunkLength;
            var x$jscomp$0 =
              thrownValue === SuspenseException
                ? getSuspendedThenable()
                : 12 === request.status
                  ? request.fatalError
                  : thrownValue;
            if (
              "object" === typeof x$jscomp$0 &&
              null !== x$jscomp$0 &&
              "function" === typeof x$jscomp$0.then
            ) {
              request$jscomp$1.status = 0;
              task.thenableState = getThenableStateAfterSuspending();
              var ping$jscomp$0 = task.ping;
              x$jscomp$0.then(ping$jscomp$0, ping$jscomp$0);
            } else {
              var errorInfo$jscomp$0 = getThrownInfo(task.componentStack);
              task.abortSet.delete(task);
              request$jscomp$1.status = 4;
              var boundary$jscomp$0 = task.blockedBoundary;
              request$jscomp$0 = logRecoverableError(
                request,
                x$jscomp$0,
                errorInfo$jscomp$0
              );
              null === boundary$jscomp$0
                ? fatalError(request, x$jscomp$0)
                : (boundary$jscomp$0.pendingTasks--,
                  4 !== boundary$jscomp$0.status &&
                    ((boundary$jscomp$0.status = 4),
                    (boundary$jscomp$0.errorDigest = request$jscomp$0),
                    untrackBoundary(request, boundary$jscomp$0),
                    boundary$jscomp$0.parentFlushed &&
                      request.clientRenderedBoundaries.push(
                        boundary$jscomp$0
                      )));
              request.allPendingTasks--;
              0 === request.allPendingTasks && completeAll(request);
            }
          } finally {
          }
        }
      }
      pingedTasks.splice(0, i);
      null !== request$jscomp$2.destination &&
        flushCompletedQueues(request$jscomp$2, request$jscomp$2.destination);
    } catch (error) {
      logRecoverableError(request$jscomp$2, error, {}),
        fatalError(request$jscomp$2, error);
    } finally {
      (currentResumableState = prevResumableState),
        (ReactSharedInternals.H = prevDispatcher),
        (ReactSharedInternals.A = prevAsyncDispatcher),
        prevDispatcher === HooksDispatcher && switchContext(prevContext),
        (currentRequest = prevRequest);
    }
  }
}
function flushSubtree(request, destination, segment, hoistableState) {
  segment.parentFlushed = !0;
  switch (segment.status) {
    case 0:
      segment.id = request.nextSegmentId++;
    case 5:
      return (
        (hoistableState = segment.id),
        (segment.lastPushedText = !1),
        (segment.textEmbedded = !1),
        (request = request.renderState),
        destination.push('<template id="'),
        destination.push(request.placeholderPrefix),
        (request = hoistableState.toString(16)),
        destination.push(request),
        destination.push('"></template>')
      );
    case 1:
      segment.status = 2;
      var r = !0,
        chunks = segment.chunks,
        chunkIdx = 0;
      segment = segment.children;
      for (var childIdx = 0; childIdx < segment.length; childIdx++) {
        for (r = segment[childIdx]; chunkIdx < r.index; chunkIdx++)
          destination.push(chunks[chunkIdx]);
        r = flushSegment(request, destination, r, hoistableState);
      }
      for (; chunkIdx < chunks.length - 1; chunkIdx++)
        destination.push(chunks[chunkIdx]);
      chunkIdx < chunks.length && (r = destination.push(chunks[chunkIdx]));
      return r;
    default:
      throw Error(
        "Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React."
      );
  }
}
function flushSegment(request, destination, segment, hoistableState) {
  var boundary = segment.boundary;
  if (null === boundary)
    return flushSubtree(request, destination, segment, hoistableState);
  boundary.parentFlushed = !0;
  if (4 === boundary.status)
    return (
      request.renderState.generateStaticMarkup ||
        ((boundary = boundary.errorDigest),
        destination.push("\x3c!--$!--\x3e"),
        destination.push("<template"),
        boundary &&
          (destination.push(' data-dgst="'),
          (boundary = escapeTextForBrowser(boundary)),
          destination.push(boundary),
          destination.push('"')),
        destination.push("></template>")),
      flushSubtree(request, destination, segment, hoistableState),
      (request = request.renderState.generateStaticMarkup
        ? !0
        : destination.push("\x3c!--/$--\x3e")),
      request
    );
  if (1 !== boundary.status)
    return (
      0 === boundary.status &&
        (boundary.rootSegmentID = request.nextSegmentId++),
      0 < boundary.completedSegments.length &&
        request.partialBoundaries.push(boundary),
      writeStartPendingSuspenseBoundary(
        destination,
        request.renderState,
        boundary.rootSegmentID
      ),
      hoistableState &&
        ((boundary = boundary.fallbackState),
        boundary.styles.forEach(hoistStyleQueueDependency, hoistableState),
        boundary.stylesheets.forEach(
          hoistStylesheetDependency,
          hoistableState
        )),
      flushSubtree(request, destination, segment, hoistableState),
      destination.push("\x3c!--/$--\x3e")
    );
  if (boundary.byteSize > request.progressiveChunkSize)
    return (
      (boundary.rootSegmentID = request.nextSegmentId++),
      request.completedBoundaries.push(boundary),
      writeStartPendingSuspenseBoundary(
        destination,
        request.renderState,
        boundary.rootSegmentID
   